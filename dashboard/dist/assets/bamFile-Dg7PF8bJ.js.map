{"version":3,"file":"bamFile-Dg7PF8bJ.js","sources":["../node_modules/@gmod/bam/esm/virtualOffset.js","../node_modules/@gmod/bam/esm/chunk.js","../node_modules/@gmod/bam/esm/util.js","../node_modules/@gmod/bam/esm/indexFile.js","../node_modules/@gmod/bam/esm/bai.js","../node_modules/@gmod/bam/esm/csi.js","../node_modules/@gmod/bam/esm/constants.js","../node_modules/@gmod/bam/esm/record.js","../node_modules/@gmod/bam/esm/sam.js","../node_modules/@gmod/bam/esm/bamFile.js"],"sourcesContent":["export default class VirtualOffset {\n    constructor(blockPosition, dataPosition) {\n        this.blockPosition = blockPosition; // < offset of the compressed data block\n        this.dataPosition = dataPosition; // < offset into the uncompressed data\n    }\n    toString() {\n        return `${this.blockPosition}:${this.dataPosition}`;\n    }\n    compareTo(b) {\n        return (this.blockPosition - b.blockPosition || this.dataPosition - b.dataPosition);\n    }\n    static min(...args) {\n        let min;\n        let i = 0;\n        for (; !min; i += 1) {\n            min = args[i];\n        }\n        for (; i < args.length; i += 1) {\n            if (min.compareTo(args[i]) > 0) {\n                min = args[i];\n            }\n        }\n        return min;\n    }\n}\nexport function fromBytes(bytes, offset = 0, bigendian = false) {\n    if (bigendian) {\n        throw new Error('big-endian virtual file offsets not implemented');\n    }\n    return new VirtualOffset(bytes[offset + 7] * 0x10000000000 +\n        bytes[offset + 6] * 0x100000000 +\n        bytes[offset + 5] * 0x1000000 +\n        bytes[offset + 4] * 0x10000 +\n        bytes[offset + 3] * 0x100 +\n        bytes[offset + 2], (bytes[offset + 1] << 8) | bytes[offset]);\n}\n//# sourceMappingURL=virtualOffset.js.map","// little class representing a chunk in the index\nexport default class Chunk {\n    constructor(minv, maxv, bin, _fetchedSize) {\n        this.minv = minv;\n        this.maxv = maxv;\n        this.bin = bin;\n        this._fetchedSize = _fetchedSize;\n    }\n    toUniqueString() {\n        return `${this.minv.toString()}..${this.maxv.toString()} (bin ${this.bin}, fetchedSize ${this.fetchedSize()})`;\n    }\n    toString() {\n        return this.toUniqueString();\n    }\n    compareTo(b) {\n        return (this.minv.compareTo(b.minv) ||\n            this.maxv.compareTo(b.maxv) ||\n            this.bin - b.bin);\n    }\n    fetchedSize() {\n        if (this._fetchedSize !== undefined) {\n            return this._fetchedSize;\n        }\n        return this.maxv.blockPosition + (1 << 16) - this.minv.blockPosition;\n    }\n}\n//# sourceMappingURL=chunk.js.map","import Long from 'long';\nexport function timeout(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n/**\n * Properly check if the given AbortSignal is aborted.\n * Per the standard, if the signal reads as aborted,\n * this function throws either a DOMException AbortError, or a regular error\n * with a `code` attribute set to `ERR_ABORTED`.\n *\n * For convenience, passing `undefined` is a no-op\n *\n * @param {AbortSignal} [signal] an AbortSignal, or anything with an `aborted` attribute\n * @returns nothing\n */\nexport function checkAbortSignal(signal) {\n    if (!signal) {\n        return;\n    }\n    if (signal.aborted) {\n        // console.log('bam aborted!')\n        if (typeof DOMException === 'undefined') {\n            const e = new Error('aborted');\n            //@ts-ignore\n            e.code = 'ERR_ABORTED';\n            throw e;\n        }\n        else {\n            throw new DOMException('aborted', 'AbortError');\n        }\n    }\n}\n/**\n * Skips to the next tick, then runs `checkAbortSignal`.\n * Await this to inside an otherwise synchronous loop to\n * provide a place to break when an abort signal is received.\n * @param {AbortSignal} signal\n */\nexport async function abortBreakPoint(signal) {\n    await Promise.resolve();\n    checkAbortSignal(signal);\n}\nexport function canMergeBlocks(chunk1, chunk2) {\n    return (chunk2.minv.blockPosition - chunk1.maxv.blockPosition < 65000 &&\n        chunk2.maxv.blockPosition - chunk1.minv.blockPosition < 5000000);\n}\nexport function makeOpts(obj = {}) {\n    return 'aborted' in obj ? { signal: obj } : obj;\n}\nexport function optimizeChunks(chunks, lowest) {\n    const mergedChunks = [];\n    let lastChunk;\n    if (chunks.length === 0) {\n        return chunks;\n    }\n    chunks.sort((c0, c1) => {\n        const dif = c0.minv.blockPosition - c1.minv.blockPosition;\n        return dif === 0 ? c0.minv.dataPosition - c1.minv.dataPosition : dif;\n    });\n    for (const chunk of chunks) {\n        if (!lowest || chunk.maxv.compareTo(lowest) > 0) {\n            if (lastChunk === undefined) {\n                mergedChunks.push(chunk);\n                lastChunk = chunk;\n            }\n            else {\n                if (canMergeBlocks(lastChunk, chunk)) {\n                    if (chunk.maxv.compareTo(lastChunk.maxv) > 0) {\n                        lastChunk.maxv = chunk.maxv;\n                    }\n                }\n                else {\n                    mergedChunks.push(chunk);\n                    lastChunk = chunk;\n                }\n            }\n        }\n    }\n    return mergedChunks;\n}\nexport function parsePseudoBin(bytes, offset) {\n    return {\n        lineCount: Long.fromBytesLE(Array.prototype.slice.call(bytes, offset, offset + 8), true).toNumber(),\n    };\n}\nexport function findFirstData(firstDataLine, virtualOffset) {\n    return firstDataLine\n        ? firstDataLine.compareTo(virtualOffset) > 0\n            ? virtualOffset\n            : firstDataLine\n        : virtualOffset;\n}\nexport function parseNameBytes(namesBytes, renameRefSeq = s => s) {\n    let currRefId = 0;\n    let currNameStart = 0;\n    const refIdToName = [];\n    const refNameToId = {};\n    for (let i = 0; i < namesBytes.length; i += 1) {\n        if (!namesBytes[i]) {\n            if (currNameStart < i) {\n                let refName = namesBytes.toString('utf8', currNameStart, i);\n                refName = renameRefSeq(refName);\n                refIdToName[currRefId] = refName;\n                refNameToId[refName] = currRefId;\n            }\n            currNameStart = i + 1;\n            currRefId += 1;\n        }\n    }\n    return { refNameToId, refIdToName };\n}\n//# sourceMappingURL=util.js.map","export default class IndexFile {\n    /**\n     * @param {filehandle} filehandle\n     * @param {function} [renameRefSeqs]\n     */\n    constructor({ filehandle, renameRefSeq = (n) => n, }) {\n        this.filehandle = filehandle;\n        this.renameRefSeq = renameRefSeq;\n    }\n}\n//# sourceMappingURL=indexFile.js.map","import { fromBytes } from './virtualOffset';\nimport Chunk from './chunk';\nimport { optimizeChunks, parsePseudoBin, findFirstData } from './util';\nimport IndexFile from './indexFile';\nconst BAI_MAGIC = 21578050; // BAI\\1\nfunction roundDown(n, multiple) {\n    return n - (n % multiple);\n}\nfunction roundUp(n, multiple) {\n    return n - (n % multiple) + multiple;\n}\nfunction reg2bins(beg, end) {\n    end -= 1;\n    return [\n        [0, 0],\n        [1 + (beg >> 26), 1 + (end >> 26)],\n        [9 + (beg >> 23), 9 + (end >> 23)],\n        [73 + (beg >> 20), 73 + (end >> 20)],\n        [585 + (beg >> 17), 585 + (end >> 17)],\n        [4681 + (beg >> 14), 4681 + (end >> 14)],\n    ];\n}\nexport default class BAI extends IndexFile {\n    async lineCount(refId, opts) {\n        var _a, _b;\n        const indexData = await this.parse(opts);\n        return ((_b = (_a = indexData.indices[refId]) === null || _a === void 0 ? void 0 : _a.stats) === null || _b === void 0 ? void 0 : _b.lineCount) || 0;\n    }\n    // fetch and parse the index\n    async _parse(opts) {\n        const bytes = (await this.filehandle.readFile(opts));\n        // check BAI magic numbers\n        if (bytes.readUInt32LE(0) !== BAI_MAGIC) {\n            throw new Error('Not a BAI file');\n        }\n        const refCount = bytes.readInt32LE(4);\n        const depth = 5;\n        const binLimit = ((1 << ((depth + 1) * 3)) - 1) / 7;\n        // read the indexes for each reference sequence\n        let curr = 8;\n        let firstDataLine;\n        const indices = new Array(refCount);\n        for (let i = 0; i < refCount; i++) {\n            // the binning index\n            const binCount = bytes.readInt32LE(curr);\n            let stats;\n            curr += 4;\n            const binIndex = {};\n            for (let j = 0; j < binCount; j += 1) {\n                const bin = bytes.readUInt32LE(curr);\n                curr += 4;\n                if (bin === binLimit + 1) {\n                    curr += 4;\n                    stats = parsePseudoBin(bytes, curr + 16);\n                    curr += 32;\n                }\n                else if (bin > binLimit + 1) {\n                    throw new Error('bai index contains too many bins, please use CSI');\n                }\n                else {\n                    const chunkCount = bytes.readInt32LE(curr);\n                    curr += 4;\n                    const chunks = new Array(chunkCount);\n                    for (let k = 0; k < chunkCount; k++) {\n                        const u = fromBytes(bytes, curr);\n                        curr += 8;\n                        const v = fromBytes(bytes, curr);\n                        curr += 8;\n                        firstDataLine = findFirstData(firstDataLine, u);\n                        chunks[k] = new Chunk(u, v, bin);\n                    }\n                    binIndex[bin] = chunks;\n                }\n            }\n            const linearCount = bytes.readInt32LE(curr);\n            curr += 4;\n            // as we're going through the linear index, figure out the smallest\n            // virtual offset in the indexes, which tells us where the BAM header\n            // ends\n            const linearIndex = new Array(linearCount);\n            for (let j = 0; j < linearCount; j++) {\n                const offset = fromBytes(bytes, curr);\n                curr += 8;\n                firstDataLine = findFirstData(firstDataLine, offset);\n                linearIndex[j] = offset;\n            }\n            indices[i] = { binIndex, linearIndex, stats };\n        }\n        return {\n            bai: true,\n            firstDataLine,\n            maxBlockSize: 1 << 16,\n            indices,\n            refCount,\n        };\n    }\n    async indexCov(seqId, start, end, opts = {}) {\n        const v = 16384;\n        const range = start !== undefined;\n        const indexData = await this.parse(opts);\n        const seqIdx = indexData.indices[seqId];\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!seqIdx) {\n            return [];\n        }\n        const { linearIndex = [], stats } = seqIdx;\n        if (linearIndex.length === 0) {\n            return [];\n        }\n        const e = end === undefined ? (linearIndex.length - 1) * v : roundUp(end, v);\n        const s = start === undefined ? 0 : roundDown(start, v);\n        const depths = range\n            ? new Array((e - s) / v)\n            : new Array(linearIndex.length - 1);\n        const totalSize = linearIndex[linearIndex.length - 1].blockPosition;\n        if (e > (linearIndex.length - 1) * v) {\n            throw new Error('query outside of range of linear index');\n        }\n        let currentPos = linearIndex[s / v].blockPosition;\n        for (let i = s / v, j = 0; i < e / v; i++, j++) {\n            depths[j] = {\n                score: linearIndex[i + 1].blockPosition - currentPos,\n                start: i * v,\n                end: i * v + v,\n            };\n            currentPos = linearIndex[i + 1].blockPosition;\n        }\n        return depths.map(d => ({\n            ...d,\n            score: (d.score * ((stats === null || stats === void 0 ? void 0 : stats.lineCount) || 0)) / totalSize,\n        }));\n    }\n    async blocksForRange(refId, min, max, opts = {}) {\n        if (min < 0) {\n            min = 0;\n        }\n        const indexData = await this.parse(opts);\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!indexData) {\n            return [];\n        }\n        const ba = indexData.indices[refId];\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!ba) {\n            return [];\n        }\n        // List of bin #s that overlap min, max\n        const overlappingBins = reg2bins(min, max);\n        const chunks = [];\n        // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n        for (const [start, end] of overlappingBins) {\n            for (let bin = start; bin <= end; bin++) {\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                if (ba.binIndex[bin]) {\n                    const binChunks = ba.binIndex[bin];\n                    for (const binChunk of binChunks) {\n                        chunks.push(new Chunk(binChunk.minv, binChunk.maxv, bin));\n                    }\n                }\n            }\n        }\n        // Use the linear index to find minimum file position of chunks that could\n        // contain alignments in the region\n        const nintv = ba.linearIndex.length;\n        let lowest;\n        const minLin = Math.min(min >> 14, nintv - 1);\n        const maxLin = Math.min(max >> 14, nintv - 1);\n        for (let i = minLin; i <= maxLin; ++i) {\n            const vp = ba.linearIndex[i];\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            if (vp && (!lowest || vp.compareTo(lowest) < 0)) {\n                lowest = vp;\n            }\n        }\n        return optimizeChunks(chunks, lowest);\n    }\n    async parse(opts = {}) {\n        if (!this.setupP) {\n            this.setupP = this._parse(opts).catch((e) => {\n                this.setupP = undefined;\n                throw e;\n            });\n        }\n        return this.setupP;\n    }\n    async hasRefSeq(seqId, opts = {}) {\n        var _a;\n        const header = await this.parse(opts);\n        return !!((_a = header.indices[seqId]) === null || _a === void 0 ? void 0 : _a.binIndex);\n    }\n}\n//# sourceMappingURL=bai.js.map","import { unzip } from '@gmod/bgzf-filehandle';\nimport VirtualOffset, { fromBytes } from './virtualOffset';\nimport Chunk from './chunk';\nimport { optimizeChunks, findFirstData, parsePseudoBin, parseNameBytes, } from './util';\nimport IndexFile from './indexFile';\nconst CSI1_MAGIC = 21582659; // CSI\\1\nconst CSI2_MAGIC = 38359875; // CSI\\2\nfunction lshift(num, bits) {\n    return num * 2 ** bits;\n}\nfunction rshift(num, bits) {\n    return Math.floor(num / 2 ** bits);\n}\nexport default class CSI extends IndexFile {\n    constructor() {\n        super(...arguments);\n        this.maxBinNumber = 0;\n        this.depth = 0;\n        this.minShift = 0;\n    }\n    async lineCount(refId, opts) {\n        var _a, _b;\n        const indexData = await this.parse(opts);\n        return ((_b = (_a = indexData.indices[refId]) === null || _a === void 0 ? void 0 : _a.stats) === null || _b === void 0 ? void 0 : _b.lineCount) || 0;\n    }\n    async indexCov() {\n        return [];\n    }\n    parseAuxData(bytes, offset) {\n        const formatFlags = bytes.readInt32LE(offset);\n        const coordinateType = formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed';\n        const format = { 0: 'generic', 1: 'SAM', 2: 'VCF' }[formatFlags & 0xf];\n        if (!format) {\n            throw new Error(`invalid Tabix preset format flags ${formatFlags}`);\n        }\n        const columnNumbers = {\n            ref: bytes.readInt32LE(offset + 4),\n            start: bytes.readInt32LE(offset + 8),\n            end: bytes.readInt32LE(offset + 12),\n        };\n        const metaValue = bytes.readInt32LE(offset + 16);\n        const metaChar = metaValue ? String.fromCharCode(metaValue) : '';\n        const skipLines = bytes.readInt32LE(offset + 20);\n        const nameSectionLength = bytes.readInt32LE(offset + 24);\n        return {\n            columnNumbers,\n            coordinateType,\n            metaValue,\n            metaChar,\n            skipLines,\n            format,\n            formatFlags,\n            ...parseNameBytes(bytes.subarray(offset + 28, offset + 28 + nameSectionLength), this.renameRefSeq),\n        };\n    }\n    // fetch and parse the index\n    async _parse(opts) {\n        const buffer = await this.filehandle.readFile(opts);\n        const bytes = await unzip(buffer);\n        let csiVersion;\n        // check TBI magic numbers\n        if (bytes.readUInt32LE(0) === CSI1_MAGIC) {\n            csiVersion = 1;\n        }\n        else if (bytes.readUInt32LE(0) === CSI2_MAGIC) {\n            csiVersion = 2;\n        }\n        else {\n            throw new Error('Not a CSI file');\n            // TODO: do we need to support big-endian CSI files?\n        }\n        this.minShift = bytes.readInt32LE(4);\n        this.depth = bytes.readInt32LE(8);\n        this.maxBinNumber = ((1 << ((this.depth + 1) * 3)) - 1) / 7;\n        const auxLength = bytes.readInt32LE(12);\n        const aux = auxLength >= 30 ? this.parseAuxData(bytes, 16) : undefined;\n        const refCount = bytes.readInt32LE(16 + auxLength);\n        // read the indexes for each reference sequence\n        let curr = 16 + auxLength + 4;\n        let firstDataLine;\n        const indices = new Array(refCount);\n        for (let i = 0; i < refCount; i++) {\n            // the binning index\n            const binCount = bytes.readInt32LE(curr);\n            curr += 4;\n            const binIndex = {};\n            let stats; // < provided by parsing a pseudo-bin, if present\n            for (let j = 0; j < binCount; j++) {\n                const bin = bytes.readUInt32LE(curr);\n                curr += 4;\n                if (bin > this.maxBinNumber) {\n                    stats = parsePseudoBin(bytes, curr + 28);\n                    curr += 28 + 16;\n                }\n                else {\n                    firstDataLine = findFirstData(firstDataLine, fromBytes(bytes, curr));\n                    curr += 8;\n                    const chunkCount = bytes.readInt32LE(curr);\n                    curr += 4;\n                    const chunks = new Array(chunkCount);\n                    for (let k = 0; k < chunkCount; k += 1) {\n                        const u = fromBytes(bytes, curr);\n                        curr += 8;\n                        const v = fromBytes(bytes, curr);\n                        curr += 8;\n                        firstDataLine = findFirstData(firstDataLine, u);\n                        chunks[k] = new Chunk(u, v, bin);\n                    }\n                    binIndex[bin] = chunks;\n                }\n            }\n            indices[i] = { binIndex, stats };\n        }\n        return {\n            csiVersion,\n            firstDataLine,\n            indices,\n            refCount,\n            csi: true,\n            maxBlockSize: 1 << 16,\n            ...aux,\n        };\n    }\n    async blocksForRange(refId, min, max, opts = {}) {\n        if (min < 0) {\n            min = 0;\n        }\n        const indexData = await this.parse(opts);\n        const ba = indexData.indices[refId];\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!ba) {\n            return [];\n        }\n        const overlappingBins = this.reg2bins(min, max);\n        if (overlappingBins.length === 0) {\n            return [];\n        }\n        const chunks = [];\n        // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n        for (const [start, end] of overlappingBins) {\n            for (let bin = start; bin <= end; bin++) {\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                if (ba.binIndex[bin]) {\n                    const binChunks = ba.binIndex[bin];\n                    for (const c of binChunks) {\n                        chunks.push(c);\n                    }\n                }\n            }\n        }\n        return optimizeChunks(chunks, new VirtualOffset(0, 0));\n    }\n    /**\n     * calculate the list of bins that may overlap with region [beg,end)\n     * (zero-based half-open)\n     */\n    reg2bins(beg, end) {\n        beg -= 1; // < convert to 1-based closed\n        if (beg < 1) {\n            beg = 1;\n        }\n        if (end > 2 ** 50) {\n            end = 2 ** 34;\n        } // 17 GiB ought to be enough for anybody\n        end -= 1;\n        let l = 0;\n        let t = 0;\n        let s = this.minShift + this.depth * 3;\n        const bins = [];\n        for (; l <= this.depth; s -= 3, t += lshift(1, l * 3), l += 1) {\n            const b = t + rshift(beg, s);\n            const e = t + rshift(end, s);\n            if (e - b + bins.length > this.maxBinNumber) {\n                throw new Error(`query ${beg}-${end} is too large for current binning scheme (shift ${this.minShift}, depth ${this.depth}), try a smaller query or a coarser index binning scheme`);\n            }\n            bins.push([b, e]);\n        }\n        return bins;\n    }\n    async parse(opts = {}) {\n        if (!this.setupP) {\n            this.setupP = this._parse(opts).catch((e) => {\n                this.setupP = undefined;\n                throw e;\n            });\n        }\n        return this.setupP;\n    }\n    async hasRefSeq(seqId, opts = {}) {\n        var _a;\n        const header = await this.parse(opts);\n        return !!((_a = header.indices[seqId]) === null || _a === void 0 ? void 0 : _a.binIndex);\n    }\n}\n//# sourceMappingURL=csi.js.map","export default {\n    //  the read is paired in sequencing, no matter whether it is mapped in a pair\n    BAM_FPAIRED: 1,\n    //  the read is mapped in a proper pair\n    BAM_FPROPER_PAIR: 2,\n    //  the read itself is unmapped; conflictive with BAM_FPROPER_PAIR\n    BAM_FUNMAP: 4,\n    //  the mate is unmapped\n    BAM_FMUNMAP: 8,\n    //  the read is mapped to the reverse strand\n    BAM_FREVERSE: 16,\n    //  the mate is mapped to the reverse strand\n    BAM_FMREVERSE: 32,\n    //  this is read1\n    BAM_FREAD1: 64,\n    //  this is read2\n    BAM_FREAD2: 128,\n    //  not primary alignment\n    BAM_FSECONDARY: 256,\n    //  QC failure\n    BAM_FQCFAIL: 512,\n    //  optical or PCR duplicate\n    BAM_FDUP: 1024,\n    //  supplementary alignment\n    BAM_FSUPPLEMENTARY: 2048,\n};\n//# sourceMappingURL=constants.js.map","import Constants from './constants';\nconst SEQRET_DECODER = '=ACMGRSVTWYHKDBN'.split('');\nconst CIGAR_DECODER = 'MIDNSHP=X???????'.split('');\nexport default class BamRecord {\n    constructor(args) {\n        this.bytes = args.bytes;\n        this.fileOffset = args.fileOffset;\n    }\n    get byteArray() {\n        return this.bytes.byteArray;\n    }\n    get flags() {\n        return ((this.byteArray.readInt32LE(this.bytes.start + 16) & 0xffff0000) >> 16);\n    }\n    get ref_id() {\n        return this.byteArray.readInt32LE(this.bytes.start + 4);\n    }\n    get start() {\n        return this.byteArray.readInt32LE(this.bytes.start + 8);\n    }\n    get end() {\n        return this.start + this.length_on_ref;\n    }\n    get id() {\n        return this.fileOffset;\n    }\n    get mq() {\n        const mq = (this.bin_mq_nl & 0xff00) >> 8;\n        return mq === 255 ? undefined : mq;\n    }\n    get score() {\n        return this.mq;\n    }\n    get qual() {\n        if (this.isSegmentUnmapped()) {\n            return;\n        }\n        const p = this.b0 +\n            this.read_name_length +\n            this.num_cigar_ops * 4 +\n            this.num_seq_bytes;\n        return this.byteArray.subarray(p, p + this.seq_length);\n    }\n    get strand() {\n        return this.isReverseComplemented() ? -1 : 1;\n    }\n    get b0() {\n        return this.bytes.start + 36;\n    }\n    get name() {\n        return this.byteArray.toString('ascii', this.b0, this.b0 + this.read_name_length - 1);\n    }\n    get tags() {\n        const { byteArray } = this.bytes;\n        let p = this.b0 +\n            this.read_name_length +\n            this.num_cigar_ops * 4 +\n            this.num_seq_bytes +\n            this.seq_length;\n        const blockEnd = this.bytes.end;\n        const tags = {};\n        while (p < blockEnd) {\n            const tag = String.fromCharCode(byteArray[p], byteArray[p + 1]);\n            const type = String.fromCharCode(byteArray[p + 2]);\n            p += 3;\n            if (type === 'A') {\n                tags[tag] = String.fromCharCode(byteArray[p]);\n                p += 1;\n            }\n            else if (type === 'i') {\n                tags[tag] = byteArray.readInt32LE(p);\n                p += 4;\n            }\n            else if (type === 'I') {\n                tags[tag] = byteArray.readUInt32LE(p);\n                p += 4;\n            }\n            else if (type === 'c') {\n                tags[tag] = byteArray.readInt8(p);\n                p += 1;\n            }\n            else if (type === 'C') {\n                tags[tag] = byteArray.readUInt8(p);\n                p += 1;\n            }\n            else if (type === 's') {\n                tags[tag] = byteArray.readInt16LE(p);\n                p += 2;\n            }\n            else if (type === 'S') {\n                tags[tag] = byteArray.readUInt16LE(p);\n                p += 2;\n            }\n            else if (type === 'f') {\n                tags[tag] = byteArray.readFloatLE(p);\n                p += 4;\n            }\n            else if (type === 'Z' || type === 'H') {\n                const value = [];\n                while (p <= blockEnd) {\n                    const cc = byteArray[p++];\n                    if (cc !== 0) {\n                        value.push(String.fromCharCode(cc));\n                    }\n                    else {\n                        break;\n                    }\n                }\n                tags[tag] = value.join('');\n            }\n            else if (type === 'B') {\n                const cc = byteArray[p++];\n                const Btype = String.fromCharCode(cc);\n                const limit = byteArray.readInt32LE(p);\n                p += 4;\n                if (Btype === 'i') {\n                    if (tag === 'CG') {\n                        const value = [];\n                        for (let k = 0; k < limit; k++) {\n                            const cigop = byteArray.readInt32LE(p);\n                            const lop = cigop >> 4;\n                            const op = CIGAR_DECODER[cigop & 0xf];\n                            value.push(lop + op);\n                            p += 4;\n                        }\n                        tags[tag] = value.join('');\n                    }\n                    else {\n                        const value = [];\n                        for (let k = 0; k < limit; k++) {\n                            value.push(byteArray.readInt32LE(p));\n                            p += 4;\n                        }\n                        tags[tag] = value;\n                    }\n                }\n                else if (Btype === 'I') {\n                    if (tag === 'CG') {\n                        const value = [];\n                        for (let k = 0; k < limit; k++) {\n                            const cigop = byteArray.readUInt32LE(p);\n                            const lop = cigop >> 4;\n                            const op = CIGAR_DECODER[cigop & 0xf];\n                            value.push(lop + op);\n                            p += 4;\n                        }\n                        tags[tag] = value.join('');\n                    }\n                    else {\n                        const value = [];\n                        for (let k = 0; k < limit; k++) {\n                            value.push(byteArray.readUInt32LE(p));\n                            p += 4;\n                        }\n                        tags[tag] = value;\n                    }\n                }\n                else if (Btype === 's') {\n                    const value = [];\n                    for (let k = 0; k < limit; k++) {\n                        value.push(byteArray.readInt16LE(p));\n                        p += 2;\n                    }\n                    tags[tag] = value;\n                }\n                else if (Btype === 'S') {\n                    const value = [];\n                    for (let k = 0; k < limit; k++) {\n                        value.push(byteArray.readUInt16LE(p));\n                        p += 2;\n                    }\n                    tags[tag] = value;\n                }\n                else if (Btype === 'c') {\n                    const value = [];\n                    for (let k = 0; k < limit; k++) {\n                        value.push(byteArray.readInt8(p));\n                        p += 1;\n                    }\n                    tags[tag] = value;\n                }\n                else if (Btype === 'C') {\n                    const value = [];\n                    for (let k = 0; k < limit; k++) {\n                        value.push(byteArray.readUInt8(p));\n                        p += 1;\n                    }\n                    tags[tag] = value;\n                }\n                else if (Btype === 'f') {\n                    const value = [];\n                    for (let k = 0; k < limit; k++) {\n                        value.push(byteArray.readFloatLE(p));\n                        p += 4;\n                    }\n                    tags[tag] = value;\n                }\n            }\n            else {\n                console.error('Unknown BAM tag type', type);\n                break;\n            }\n        }\n        return tags;\n    }\n    /**\n     * @returns {boolean} true if the read is paired, regardless of whether both\n     * segments are mapped\n     */\n    isPaired() {\n        return !!(this.flags & Constants.BAM_FPAIRED);\n    }\n    /** @returns {boolean} true if the read is paired, and both segments are mapped */\n    isProperlyPaired() {\n        return !!(this.flags & Constants.BAM_FPROPER_PAIR);\n    }\n    /** @returns {boolean} true if the read itself is unmapped; conflictive with isProperlyPaired */\n    isSegmentUnmapped() {\n        return !!(this.flags & Constants.BAM_FUNMAP);\n    }\n    /** @returns {boolean} true if the read itself is unmapped; conflictive with isProperlyPaired */\n    isMateUnmapped() {\n        return !!(this.flags & Constants.BAM_FMUNMAP);\n    }\n    /** @returns {boolean} true if the read is mapped to the reverse strand */\n    isReverseComplemented() {\n        return !!(this.flags & Constants.BAM_FREVERSE);\n    }\n    /** @returns {boolean} true if the mate is mapped to the reverse strand */\n    isMateReverseComplemented() {\n        return !!(this.flags & Constants.BAM_FMREVERSE);\n    }\n    /** @returns {boolean} true if this is read number 1 in a pair */\n    isRead1() {\n        return !!(this.flags & Constants.BAM_FREAD1);\n    }\n    /** @returns {boolean} true if this is read number 2 in a pair */\n    isRead2() {\n        return !!(this.flags & Constants.BAM_FREAD2);\n    }\n    /** @returns {boolean} true if this is a secondary alignment */\n    isSecondary() {\n        return !!(this.flags & Constants.BAM_FSECONDARY);\n    }\n    /** @returns {boolean} true if this read has failed QC checks */\n    isFailedQc() {\n        return !!(this.flags & Constants.BAM_FQCFAIL);\n    }\n    /** @returns {boolean} true if the read is an optical or PCR duplicate */\n    isDuplicate() {\n        return !!(this.flags & Constants.BAM_FDUP);\n    }\n    /** @returns {boolean} true if this is a supplementary alignment */\n    isSupplementary() {\n        return !!(this.flags & Constants.BAM_FSUPPLEMENTARY);\n    }\n    get cigarAndLength() {\n        if (this.isSegmentUnmapped()) {\n            return {\n                length_on_ref: 0,\n                CIGAR: '',\n            };\n        }\n        const numCigarOps = this.num_cigar_ops;\n        let p = this.b0 + this.read_name_length;\n        const CIGAR = [];\n        // check for CG tag by inspecting whether the CIGAR field contains a clip\n        // that consumes entire seqLen\n        let cigop = this.byteArray.readInt32LE(p);\n        let lop = cigop >> 4;\n        let op = CIGAR_DECODER[cigop & 0xf];\n        if (op === 'S' && lop === this.seq_length) {\n            // if there is a CG the second CIGAR field will be a N tag the represents\n            // the length on ref\n            p += 4;\n            cigop = this.byteArray.readInt32LE(p);\n            lop = cigop >> 4;\n            op = CIGAR_DECODER[cigop & 0xf];\n            if (op !== 'N') {\n                console.warn('CG tag with no N tag');\n            }\n            return {\n                CIGAR: this.tags.CG,\n                length_on_ref: lop,\n            };\n        }\n        else {\n            let lref = 0;\n            for (let c = 0; c < numCigarOps; ++c) {\n                cigop = this.byteArray.readInt32LE(p);\n                lop = cigop >> 4;\n                op = CIGAR_DECODER[cigop & 0xf];\n                CIGAR.push(lop + op);\n                // soft clip, hard clip, and insertion don't count toward the length on\n                // the reference\n                if (op !== 'H' && op !== 'S' && op !== 'I') {\n                    lref += lop;\n                }\n                p += 4;\n            }\n            return {\n                CIGAR: CIGAR.join(''),\n                length_on_ref: lref,\n            };\n        }\n    }\n    get length_on_ref() {\n        return this.cigarAndLength.length_on_ref;\n    }\n    get CIGAR() {\n        return this.cigarAndLength.CIGAR;\n    }\n    get num_cigar_ops() {\n        return this.flag_nc & 0xffff;\n    }\n    get read_name_length() {\n        return this.bin_mq_nl & 0xff;\n    }\n    get num_seq_bytes() {\n        return (this.seq_length + 1) >> 1;\n    }\n    get seq() {\n        const { byteArray } = this.bytes;\n        const p = this.b0 + this.read_name_length + this.num_cigar_ops * 4;\n        const seqBytes = this.num_seq_bytes;\n        const len = this.seq_length;\n        const buf = [];\n        let i = 0;\n        for (let j = 0; j < seqBytes; ++j) {\n            const sb = byteArray[p + j];\n            buf.push(SEQRET_DECODER[(sb & 0xf0) >> 4]);\n            i++;\n            if (i < len) {\n                buf.push(SEQRET_DECODER[sb & 0x0f]);\n                i++;\n            }\n        }\n        return buf.join('');\n    }\n    // adapted from igv.js\n    get pair_orientation() {\n        if (!this.isSegmentUnmapped() &&\n            !this.isMateUnmapped() &&\n            this.ref_id === this.next_refid) {\n            const s1 = this.isReverseComplemented() ? 'R' : 'F';\n            const s2 = this.isMateReverseComplemented() ? 'R' : 'F';\n            let o1 = ' ';\n            let o2 = ' ';\n            if (this.isRead1()) {\n                o1 = '1';\n                o2 = '2';\n            }\n            else if (this.isRead2()) {\n                o1 = '2';\n                o2 = '1';\n            }\n            const tmp = [];\n            const isize = this.template_length;\n            if (isize > 0) {\n                tmp[0] = s1;\n                tmp[1] = o1;\n                tmp[2] = s2;\n                tmp[3] = o2;\n            }\n            else {\n                tmp[2] = s1;\n                tmp[3] = o1;\n                tmp[0] = s2;\n                tmp[1] = o2;\n            }\n            return tmp.join('');\n        }\n        return undefined;\n    }\n    get bin_mq_nl() {\n        return this.byteArray.readInt32LE(this.bytes.start + 12);\n    }\n    get flag_nc() {\n        return this.byteArray.readInt32LE(this.bytes.start + 16);\n    }\n    get seq_length() {\n        return this.byteArray.readInt32LE(this.bytes.start + 20);\n    }\n    get next_refid() {\n        return this.byteArray.readInt32LE(this.bytes.start + 24);\n    }\n    get next_pos() {\n        return this.byteArray.readInt32LE(this.bytes.start + 28);\n    }\n    get template_length() {\n        return this.byteArray.readInt32LE(this.bytes.start + 32);\n    }\n    toJSON() {\n        const data = {};\n        for (const k of Object.keys(this)) {\n            if (k.startsWith('_') || k === 'bytes') {\n                continue;\n            }\n            //@ts-ignore\n            data[k] = this[k];\n        }\n        return data;\n    }\n}\nfunction cacheGetter(ctor, prop) {\n    const desc = Object.getOwnPropertyDescriptor(ctor.prototype, prop);\n    if (!desc) {\n        throw new Error('OH NO, NO PROPERTY DESCRIPTOR');\n    }\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const getter = desc.get;\n    if (!getter) {\n        throw new Error('OH NO, NOT A GETTER');\n    }\n    Object.defineProperty(ctor.prototype, prop, {\n        get() {\n            const ret = getter.call(this);\n            Object.defineProperty(this, prop, { value: ret });\n            return ret;\n        },\n    });\n}\ncacheGetter(BamRecord, 'tags');\ncacheGetter(BamRecord, 'cigarAndLength');\ncacheGetter(BamRecord, 'seq');\ncacheGetter(BamRecord, 'qual');\n//# sourceMappingURL=record.js.map","export function parseHeaderText(text) {\n    const lines = text.split(/\\r?\\n/);\n    const data = [];\n    for (const line of lines) {\n        const [tag, ...fields] = line.split(/\\t/);\n        if (tag) {\n            data.push({\n                tag: tag.slice(1),\n                data: fields.map(f => {\n                    const r = f.indexOf(':');\n                    const fieldTag = f.slice(0, r);\n                    const value = f.slice(r + 1);\n                    return { tag: fieldTag, value };\n                }),\n            });\n        }\n    }\n    return data;\n}\n//# sourceMappingURL=sam.js.map","import { Buffer } from 'buffer';\nimport crc32 from 'crc/crc32';\nimport { unzip, unzipChunkSlice } from '@gmod/bgzf-filehandle';\nimport { LocalFile, RemoteFile } from 'generic-filehandle';\nimport AbortablePromiseCache from '@gmod/abortable-promise-cache';\nimport QuickLRU from 'quick-lru';\n// locals\nimport BAI from './bai';\nimport CSI from './csi';\nimport BAMFeature from './record';\nimport { parseHeaderText } from './sam';\nimport { checkAbortSignal, timeout, makeOpts } from './util';\nexport const BAM_MAGIC = 21840194;\nconst blockLen = 1 << 16;\nasync function gen2array(gen) {\n    let out = [];\n    for await (const x of gen) {\n        out = out.concat(x);\n    }\n    return out;\n}\nclass NullFilehandle {\n    read() {\n        throw new Error('never called');\n    }\n    stat() {\n        throw new Error('never called');\n    }\n    readFile() {\n        throw new Error('never called');\n    }\n    close() {\n        throw new Error('never called');\n    }\n}\nexport default class BamFile {\n    constructor({ bamFilehandle, bamPath, bamUrl, baiPath, baiFilehandle, baiUrl, csiPath, csiFilehandle, csiUrl, htsget, yieldThreadTime = 100, renameRefSeqs = n => n, }) {\n        this.htsget = false;\n        this.featureCache = new AbortablePromiseCache({\n            cache: new QuickLRU({\n                maxSize: 50,\n            }),\n            fill: async (args, signal) => {\n                const { chunk, opts } = args;\n                const { data, cpositions, dpositions } = await this._readChunk({\n                    chunk,\n                    opts: { ...opts, signal },\n                });\n                return this.readBamFeatures(data, cpositions, dpositions, chunk);\n            },\n        });\n        this.renameRefSeq = renameRefSeqs;\n        if (bamFilehandle) {\n            this.bam = bamFilehandle;\n        }\n        else if (bamPath) {\n            this.bam = new LocalFile(bamPath);\n        }\n        else if (bamUrl) {\n            this.bam = new RemoteFile(bamUrl);\n        }\n        else if (htsget) {\n            this.htsget = true;\n            this.bam = new NullFilehandle();\n        }\n        else {\n            throw new Error('unable to initialize bam');\n        }\n        if (csiFilehandle) {\n            this.index = new CSI({ filehandle: csiFilehandle });\n        }\n        else if (csiPath) {\n            this.index = new CSI({ filehandle: new LocalFile(csiPath) });\n        }\n        else if (csiUrl) {\n            this.index = new CSI({ filehandle: new RemoteFile(csiUrl) });\n        }\n        else if (baiFilehandle) {\n            this.index = new BAI({ filehandle: baiFilehandle });\n        }\n        else if (baiPath) {\n            this.index = new BAI({ filehandle: new LocalFile(baiPath) });\n        }\n        else if (baiUrl) {\n            this.index = new BAI({ filehandle: new RemoteFile(baiUrl) });\n        }\n        else if (bamPath) {\n            this.index = new BAI({ filehandle: new LocalFile(`${bamPath}.bai`) });\n        }\n        else if (bamUrl) {\n            this.index = new BAI({ filehandle: new RemoteFile(`${bamUrl}.bai`) });\n        }\n        else if (htsget) {\n            this.htsget = true;\n        }\n        else {\n            throw new Error('unable to infer index format');\n        }\n        this.yieldThreadTime = yieldThreadTime;\n    }\n    async getHeaderPre(origOpts) {\n        const opts = makeOpts(origOpts);\n        if (!this.index) {\n            return;\n        }\n        const indexData = await this.index.parse(opts);\n        const ret = indexData.firstDataLine\n            ? indexData.firstDataLine.blockPosition + 65535\n            : undefined;\n        let buffer;\n        if (ret) {\n            const s = ret + blockLen;\n            const res = await this.bam.read(Buffer.alloc(s), 0, s, 0, opts);\n            if (!res.bytesRead) {\n                throw new Error('Error reading header');\n            }\n            buffer = res.buffer.subarray(0, Math.min(res.bytesRead, ret));\n        }\n        else {\n            buffer = await this.bam.readFile(opts);\n        }\n        const uncba = await unzip(buffer);\n        if (uncba.readInt32LE(0) !== BAM_MAGIC) {\n            throw new Error('Not a BAM file');\n        }\n        const headLen = uncba.readInt32LE(4);\n        this.header = uncba.toString('utf8', 8, 8 + headLen);\n        const { chrToIndex, indexToChr } = await this._readRefSeqs(headLen + 8, 65535, opts);\n        this.chrToIndex = chrToIndex;\n        this.indexToChr = indexToChr;\n        return parseHeaderText(this.header);\n    }\n    getHeader(opts) {\n        if (!this.headerP) {\n            this.headerP = this.getHeaderPre(opts).catch((e) => {\n                this.headerP = undefined;\n                throw e;\n            });\n        }\n        return this.headerP;\n    }\n    async getHeaderText(opts = {}) {\n        await this.getHeader(opts);\n        return this.header;\n    }\n    // the full length of the refseq block is not given in advance so this grabs\n    // a chunk and doubles it if all refseqs haven't been processed\n    async _readRefSeqs(start, refSeqBytes, opts) {\n        if (start > refSeqBytes) {\n            return this._readRefSeqs(start, refSeqBytes * 2, opts);\n        }\n        const size = refSeqBytes + blockLen;\n        const { bytesRead, buffer } = await this.bam.read(Buffer.alloc(size), 0, refSeqBytes, 0, opts);\n        if (!bytesRead) {\n            throw new Error('Error reading refseqs from header');\n        }\n        const uncba = await unzip(buffer.subarray(0, Math.min(bytesRead, refSeqBytes)));\n        const nRef = uncba.readInt32LE(start);\n        let p = start + 4;\n        const chrToIndex = {};\n        const indexToChr = [];\n        for (let i = 0; i < nRef; i += 1) {\n            const lName = uncba.readInt32LE(p);\n            const refName = this.renameRefSeq(uncba.toString('utf8', p + 4, p + 4 + lName - 1));\n            const lRef = uncba.readInt32LE(p + lName + 4);\n            chrToIndex[refName] = i;\n            indexToChr.push({ refName, length: lRef });\n            p = p + 8 + lName;\n            if (p > uncba.length) {\n                console.warn(`BAM header is very big.  Re-fetching ${refSeqBytes} bytes.`);\n                return this._readRefSeqs(start, refSeqBytes * 2, opts);\n            }\n        }\n        return { chrToIndex, indexToChr };\n    }\n    async getRecordsForRange(chr, min, max, opts) {\n        return gen2array(this.streamRecordsForRange(chr, min, max, opts));\n    }\n    async *streamRecordsForRange(chr, min, max, opts) {\n        var _a;\n        await this.getHeader(opts);\n        const chrId = (_a = this.chrToIndex) === null || _a === void 0 ? void 0 : _a[chr];\n        if (chrId === undefined || !this.index) {\n            yield [];\n        }\n        else {\n            const chunks = await this.index.blocksForRange(chrId, min - 1, max, opts);\n            yield* this._fetchChunkFeatures(chunks, chrId, min, max, opts);\n        }\n    }\n    async *_fetchChunkFeatures(chunks, chrId, min, max, opts = {}) {\n        const { viewAsPairs } = opts;\n        const feats = [];\n        let done = false;\n        for (const chunk of chunks) {\n            const records = await this.featureCache.get(chunk.toString(), { chunk, opts }, opts.signal);\n            const recs = [];\n            for (const feature of records) {\n                if (feature.ref_id === chrId) {\n                    if (feature.start >= max) {\n                        // past end of range, can stop iterating\n                        done = true;\n                        break;\n                    }\n                    else if (feature.end >= min) {\n                        // must be in range\n                        recs.push(feature);\n                    }\n                }\n            }\n            feats.push(recs);\n            yield recs;\n            if (done) {\n                break;\n            }\n        }\n        checkAbortSignal(opts.signal);\n        if (viewAsPairs) {\n            yield this.fetchPairs(chrId, feats, opts);\n        }\n    }\n    async fetchPairs(chrId, feats, opts) {\n        const { pairAcrossChr, maxInsertSize = 200000 } = opts;\n        const unmatedPairs = {};\n        const readIds = {};\n        feats.map(ret => {\n            const readNames = {};\n            for (const element of ret) {\n                const name = element.name;\n                const id = element.id;\n                if (!readNames[name]) {\n                    readNames[name] = 0;\n                }\n                readNames[name]++;\n                readIds[id] = 1;\n            }\n            for (const [k, v] of Object.entries(readNames)) {\n                if (v === 1) {\n                    unmatedPairs[k] = true;\n                }\n            }\n        });\n        const matePromises = [];\n        feats.map(ret => {\n            for (const f of ret) {\n                const name = f.name;\n                const start = f.start;\n                const pnext = f.next_pos;\n                const rnext = f.next_refid;\n                if (this.index &&\n                    unmatedPairs[name] &&\n                    (pairAcrossChr ||\n                        (rnext === chrId && Math.abs(start - pnext) < maxInsertSize))) {\n                    matePromises.push(this.index.blocksForRange(rnext, pnext, pnext + 1, opts));\n                }\n            }\n        });\n        // filter out duplicate chunks (the blocks are lists of chunks, blocks are\n        // concatenated, then filter dup chunks)\n        const map = new Map();\n        const res = await Promise.all(matePromises);\n        for (const m of res.flat()) {\n            if (!map.has(m.toString())) {\n                map.set(m.toString(), m);\n            }\n        }\n        const mateFeatPromises = await Promise.all([...map.values()].map(async (c) => {\n            const { data, cpositions, dpositions, chunk } = await this._readChunk({\n                chunk: c,\n                opts,\n            });\n            const mateRecs = [];\n            for (const feature of await this.readBamFeatures(data, cpositions, dpositions, chunk)) {\n                if (unmatedPairs[feature.name] && !readIds[feature.id]) {\n                    mateRecs.push(feature);\n                }\n            }\n            return mateRecs;\n        }));\n        return mateFeatPromises.flat();\n    }\n    async _readRegion(position, size, opts = {}) {\n        const { bytesRead, buffer } = await this.bam.read(Buffer.alloc(size), 0, size, position, opts);\n        return buffer.subarray(0, Math.min(bytesRead, size));\n    }\n    async _readChunk({ chunk, opts }) {\n        const buffer = await this._readRegion(chunk.minv.blockPosition, chunk.fetchedSize(), opts);\n        const { buffer: data, cpositions, dpositions, } = await unzipChunkSlice(buffer, chunk);\n        return { data, cpositions, dpositions, chunk };\n    }\n    async readBamFeatures(ba, cpositions, dpositions, chunk) {\n        let blockStart = 0;\n        const sink = [];\n        let pos = 0;\n        let last = +Date.now();\n        while (blockStart + 4 < ba.length) {\n            const blockSize = ba.readInt32LE(blockStart);\n            const blockEnd = blockStart + 4 + blockSize - 1;\n            // increment position to the current decompressed status\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            if (dpositions) {\n                while (blockStart + chunk.minv.dataPosition >= dpositions[pos++]) { }\n                pos--;\n            }\n            // only try to read the feature if we have all the bytes for it\n            if (blockEnd < ba.length) {\n                const feature = new BAMFeature({\n                    bytes: {\n                        byteArray: ba,\n                        start: blockStart,\n                        end: blockEnd,\n                    },\n                    // the below results in an automatically calculated file-offset based\n                    // ID if the info for that is available, otherwise crc32 of the\n                    // features\n                    //\n                    // cpositions[pos] refers to actual file offset of a bgzip block\n                    // boundaries\n                    //\n                    // we multiply by (1 <<8) in order to make sure each block has a\n                    // \"unique\" address space so that data in that block could never\n                    // overlap\n                    //\n                    // then the blockStart-dpositions is an uncompressed file offset from\n                    // that bgzip block boundary, and since the cpositions are multiplied\n                    // by (1 << 8) these uncompressed offsets get a unique space\n                    //\n                    // this has an extra chunk.minv.dataPosition added on because it\n                    // blockStart starts at 0 instead of chunk.minv.dataPosition\n                    //\n                    // the +1 is just to avoid any possible uniqueId 0 but this does not\n                    // realistically happen\n                    fileOffset: cpositions.length > 0\n                        ? cpositions[pos] * (1 << 8) +\n                            (blockStart - dpositions[pos]) +\n                            chunk.minv.dataPosition +\n                            1\n                        : // must be slice, not subarray for buffer polyfill on web\n                            // eslint-disable-next-line @typescript-eslint/no-deprecated\n                            crc32.signed(ba.slice(blockStart, blockEnd)),\n                });\n                sink.push(feature);\n                if (this.yieldThreadTime && +Date.now() - last > this.yieldThreadTime) {\n                    await timeout(1);\n                    last = +Date.now();\n                }\n            }\n            blockStart = blockEnd + 1;\n        }\n        return sink;\n    }\n    async hasRefSeq(seqName) {\n        var _a, _b;\n        const seqId = (_a = this.chrToIndex) === null || _a === void 0 ? void 0 : _a[seqName];\n        return seqId === undefined ? false : (_b = this.index) === null || _b === void 0 ? void 0 : _b.hasRefSeq(seqId);\n    }\n    async lineCount(seqName) {\n        var _a;\n        const seqId = (_a = this.chrToIndex) === null || _a === void 0 ? void 0 : _a[seqName];\n        return seqId === undefined || !this.index ? 0 : this.index.lineCount(seqId);\n    }\n    async indexCov(seqName, start, end) {\n        var _a;\n        if (!this.index) {\n            return [];\n        }\n        await this.index.parse();\n        const seqId = (_a = this.chrToIndex) === null || _a === void 0 ? void 0 : _a[seqName];\n        return seqId === undefined ? [] : this.index.indexCov(seqId, start, end);\n    }\n    async blocksForRange(seqName, start, end, opts) {\n        var _a;\n        if (!this.index) {\n            return [];\n        }\n        await this.index.parse();\n        const seqId = (_a = this.chrToIndex) === null || _a === void 0 ? void 0 : _a[seqName];\n        return seqId === undefined\n            ? []\n            : this.index.blocksForRange(seqId, start, end, opts);\n    }\n}\n//# sourceMappingURL=bamFile.js.map"],"names":["VirtualOffset","blockPosition","dataPosition","b","args","min","i","fromBytes","bytes","offset","bigendian","Chunk","minv","maxv","bin","_fetchedSize","timeout","ms","resolve","checkAbortSignal","signal","e","canMergeBlocks","chunk1","chunk2","makeOpts","obj","optimizeChunks","chunks","lowest","mergedChunks","lastChunk","c0","c1","dif","chunk","parsePseudoBin","Long","findFirstData","firstDataLine","virtualOffset","parseNameBytes","namesBytes","renameRefSeq","s","currRefId","currNameStart","refIdToName","refNameToId","refName","IndexFile","filehandle","BAI_MAGIC","roundDown","n","multiple","roundUp","reg2bins","beg","end","BAI","refId","opts","_a","_b","refCount","binLimit","curr","indices","binCount","stats","binIndex","j","chunkCount","k","u","v","linearCount","linearIndex","seqId","start","range","seqIdx","depths","totalSize","currentPos","d","max","indexData","ba","overlappingBins","binChunks","binChunk","nintv","minLin","maxLin","vp","CSI1_MAGIC","CSI2_MAGIC","lshift","num","bits","rshift","CSI","formatFlags","coordinateType","format","columnNumbers","metaValue","metaChar","skipLines","nameSectionLength","buffer","unzip","csiVersion","auxLength","aux","c","l","t","bins","Constants","SEQRET_DECODER","CIGAR_DECODER","BamRecord","mq","p","byteArray","blockEnd","tags","tag","type","value","cc","Btype","limit","cigop","lop","op","numCigarOps","CIGAR","lref","seqBytes","len","buf","sb","s1","s2","o1","o2","tmp","data","cacheGetter","ctor","prop","desc","getter","ret","parseHeaderText","text","lines","line","fields","f","r","fieldTag","BAM_MAGIC","blockLen","gen2array","gen","out","x","NullFilehandle","BamFile","bamFilehandle","bamPath","bamUrl","baiPath","baiFilehandle","baiUrl","csiPath","csiFilehandle","csiUrl","htsget","yieldThreadTime","renameRefSeqs","AbortablePromiseCache","QuickLRU","cpositions","dpositions","LocalFile","RemoteFile","origOpts","res","Buffer","uncba","headLen","chrToIndex","indexToChr","refSeqBytes","size","bytesRead","nRef","lName","lRef","chr","chrId","viewAsPairs","feats","done","records","recs","feature","pairAcrossChr","maxInsertSize","unmatedPairs","readIds","readNames","element","name","id","matePromises","pnext","rnext","map","m","mateRecs","position","unzipChunkSlice","blockStart","sink","pos","last","blockSize","BAMFeature","crc32","seqName"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}