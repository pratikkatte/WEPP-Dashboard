{"version":3,"file":"doConnect-CvJCLgdG.js","sources":["../node_modules/@gmod/ucsc-hub/esm/raStanza.js","../node_modules/@gmod/ucsc-hub/esm/raFile.js","../node_modules/@gmod/ucsc-hub/esm/util.js","../node_modules/@gmod/ucsc-hub/esm/trackDbFile.js","../node_modules/@gmod/ucsc-hub/esm/genomesFile.js","../node_modules/@gmod/ucsc-hub/esm/hubFile.js","../node_modules/@gmod/ucsc-hub/esm/singleFileHub.js","../node_modules/@jbrowse/plugin-data-management/esm/UCSCTrackHub/ucscTrackHub.js","../node_modules/@jbrowse/plugin-data-management/esm/UCSCTrackHub/doConnect.js"],"sourcesContent":["/**\n * Class representing an ra file stanza. Each stanza line is split into its key\n * and value and stored as a Map, so the usual Map methods can be used on the\n * stanza.\n */\nexport default class RaStanza {\n    constructor(stanza = [], options) {\n        this.data = {};\n        const { checkIndent = true, skipValidation = false } = options !== null && options !== void 0 ? options : {};\n        let stanzaLines;\n        if (typeof stanza === 'string') {\n            stanzaLines = stanza.trimEnd().split(/\\r?\\n/);\n        }\n        else if (stanza) {\n            stanzaLines = stanza;\n        }\n        else {\n            stanzaLines = [];\n        }\n        let currentIndent;\n        let continuedLine;\n        for (const line of stanzaLines) {\n            if (line === '') {\n                throw new Error('Invalid stanza, contained blank lines');\n            }\n            if (line.trim().startsWith('#')) {\n                continue;\n            }\n            if (line.trimEnd().endsWith('\\\\')) {\n                const trimmedLine = line.trimEnd().slice(0, -1);\n                if (continuedLine) {\n                    continuedLine += trimmedLine.trimStart();\n                }\n                else {\n                    continuedLine = trimmedLine;\n                }\n                continue;\n            }\n            let combinedLine = line;\n            if (continuedLine) {\n                combinedLine = continuedLine + combinedLine.trimStart();\n                continuedLine = undefined;\n            }\n            if (currentIndent !== null && currentIndent !== void 0 ? currentIndent : checkIndent) {\n                const indent = combinedLine.match(/^([ \\t]+)/);\n                if (currentIndent === undefined) {\n                    if (indent) {\n                        ;\n                        [, currentIndent] = indent;\n                    }\n                    else {\n                        currentIndent = '';\n                    }\n                }\n                else if ((currentIndent === '' && indent !== null) ||\n                    (currentIndent && indent && currentIndent !== indent[1])) {\n                    throw new Error('Inconsistent indentation of stanza');\n                }\n            }\n            else {\n                currentIndent = '';\n            }\n            const trimmedLine = combinedLine.trim();\n            const sep = trimmedLine.indexOf(' ');\n            if (sep === -1) {\n                if (!this.nameKey) {\n                    throw new Error('First line in a stanza must have both a key and a value');\n                }\n                // Adding a key that already exists and has no value is a no-op\n                if (this.data[trimmedLine]) {\n                    continue;\n                }\n                this.data[trimmedLine] = '';\n                continue;\n            }\n            const key = trimmedLine.slice(0, sep);\n            const value = trimmedLine.slice(sep + 1);\n            if (this.data[key] && value !== this.data[key]) {\n                throw new Error('Got duplicate key with a different value in stanza: ' +\n                    `\"${key}\" key has both ${this.data[key]} and ${value}`);\n            }\n            if (!this.nameKey) {\n                this.nameKey = key;\n                this.name = trimmedLine.slice(sep + 1);\n            }\n            this.data[key] = value;\n        }\n        if (!skipValidation) {\n            this.validate();\n        }\n    }\n    validate() { }\n}\n//# sourceMappingURL=raStanza.js.map","import RaStanza from './raStanza';\n/**\n * Class representing an ra file. Each file is composed of multiple stanzas, and\n * each stanza is separated by one or more blank lines. Each stanza is stored in\n * a Map with the key being the value of the first key-value pair in the stanza.\n * The usual Map methods can be used on the file. An additional method `add()`\n * is available to take a raw line of text and break it up into a key and value\n * and add them to the class. This should be favored over `set()` when possible,\n * as it performs more validity checks than using `set()`.\n * @extends Map\n * @property {undefined|string} nameKey - The key of the first line of all the\n * stanzas (`undefined` if the stanza has no lines yet).\n * @throws {Error} Throws if an empty stanza is added, if the key in the first\n * key-value pair of each stanze isn't the same, or if two stanzas have the same\n * value for the key-value pair in their first lines.\n * @param {(string|string[])} [raFile=[]] - An ra file, either as a single\n * string or an array of strings with one stanza per entry. Supports both LF\n * and CRLF line terminators.\n * @param {object} options\n * @param {boolean} options.checkIndent [true] - Check if a the stanzas within\n * the file are indented consistently and keep track of the indentation\n */\nexport default class RaFile {\n    constructor(raFile = [], options) {\n        this.data = {};\n        const { checkIndent = true, skipValidation = false } = options !== null && options !== void 0 ? options : {};\n        let stanzas;\n        if (typeof raFile === 'string') {\n            stanzas = raFile.trimEnd().split(/(?:[\\t ]*\\r?\\n){2,}/);\n        }\n        else if (raFile) {\n            stanzas = raFile;\n        }\n        else {\n            stanzas = [];\n        }\n        for (const stanza of stanzas) {\n            if (stanza === '') {\n                throw new Error('Invalid stanza, was empty');\n            }\n            if (stanza.trim().startsWith('#')) {\n                const stanzaLines = stanza\n                    .trimEnd()\n                    .split(/\\r?\\n/)\n                    .map(line => line.trim());\n                if (stanzaLines.every(line => line.startsWith('#'))) {\n                    continue;\n                }\n            }\n            const raStanza = new RaStanza(stanza, { checkIndent });\n            if (!this.nameKey) {\n                this.nameKey = raStanza.nameKey;\n            }\n            else if (raStanza.nameKey !== this.nameKey) {\n                throw new Error('The first line in each stanza must have the same key. ' +\n                    `Saw both ${this.nameKey} and ${raStanza.nameKey}`);\n            }\n            if (!raStanza.name) {\n                throw new Error(`No stanza name: ${raStanza.name}`);\n            }\n            if (this.data[raStanza.name]) {\n                throw new Error(`Got duplicate stanza name: ${raStanza.name}`);\n            }\n            this.data[raStanza.name] = raStanza;\n        }\n        if (!skipValidation) {\n            this.validate();\n        }\n    }\n    validate() { }\n}\n//# sourceMappingURL=raFile.js.map","// validate that all required fields are present in the map\nexport function validateRequiredFieldsArePresent(map, requiredFields, description = '') {\n    const missingFields = [];\n    for (const field of requiredFields) {\n        if (!map.data[field]) {\n            missingFields.push(field);\n        }\n    }\n    if (missingFields.length > 0) {\n        throw new Error(`${description} is missing required entr${missingFields.length === 1 ? 'y' : 'ies'}: ${missingFields.join(', ')}`);\n    }\n}\n//# sourceMappingURL=util.js.map","import RaFile from './raFile';\nimport { validateRequiredFieldsArePresent } from './util';\n/**\n * Class representing a genomes.txt file.\n * @extends RaFile\n * @param {(string|string[])} [trackDbFile=[]] - A trackDb.txt file as a string\n * @throws {Error} Throws if \"track\" is not the first key in each track or if a\n * track is missing required keys\n */\nexport default class TrackDbFile extends RaFile {\n    constructor(trackDbFile, options) {\n        super(trackDbFile, { ...options, checkIndent: false });\n    }\n    validate() {\n        var _a;\n        if (this.nameKey !== 'track') {\n            throw new Error(`trackDb has \"${this.nameKey}\" instead of \"track\" as the first line in each track`);\n        }\n        for (const [trackName, track] of Object.entries(this.data)) {\n            const trackKeys = Object.keys(track.data);\n            validateRequiredFieldsArePresent(track, ['track', 'shortLabel'], `Track ${trackName}`);\n            const parentTrackKeys = new Set([\n                'superTrack',\n                'compositeTrack',\n                'container',\n                'view',\n            ]);\n            if (!trackKeys.some(key => parentTrackKeys.has(key))) {\n                if (!trackKeys.includes('bigDataUrl')) {\n                    throw new Error(`Track ${trackName} is missing required key \"bigDataUrl\"`);\n                }\n                if (!trackKeys.includes('type')) {\n                    const settingsKeys = Object.keys(this.settings(trackName));\n                    if (!settingsKeys.includes('type')) {\n                        throw new Error(`Neither track ${trackName} nor any of its parent tracks have the required key \"type\"`);\n                    }\n                }\n            }\n            let currentTrackName = trackName;\n            do {\n                // @ts-expect-error\n                currentTrackName = (_a = this.data[currentTrackName]) === null || _a === void 0 ? void 0 : _a.parent;\n                if (currentTrackName) {\n                    ;\n                    [currentTrackName] = currentTrackName.split(' ');\n                }\n            } while (currentTrackName);\n            const currentTrack = this.data[trackName];\n            if (currentTrack) {\n                this.data[trackName] = currentTrack;\n            }\n        }\n    }\n    /**\n     * Gets all track entries including those of parent tracks, with closer\n     * entries overriding more distant ones\n     * @param {string} trackName The name of a track\n     * @throws {Error} Throws if track name does not exist in the trackDb\n     */\n    settings(trackName) {\n        var _a;\n        if (!this.data[trackName]) {\n            throw new Error(`Track ${trackName} does not exist`);\n        }\n        const parentTracks = [trackName];\n        let currentTrackName = trackName;\n        do {\n            // @ts-expect-error\n            currentTrackName = (_a = this.data[currentTrackName]) === null || _a === void 0 ? void 0 : _a.parent;\n            if (currentTrackName) {\n                parentTracks.push(currentTrackName);\n            }\n        } while (currentTrackName);\n        const settings = {};\n        parentTracks.reverse();\n        for (const parentTrack of parentTracks) {\n            const ret = this.data[parentTrack];\n            if (ret) {\n                for (const [key, value] of Object.entries(ret)) {\n                    settings[key] = value;\n                }\n            }\n        }\n        return settings;\n    }\n}\n//# sourceMappingURL=trackDbFile.js.map","import RaFile from './raFile';\nimport { validateRequiredFieldsArePresent } from './util';\n/**\n * Class representing a genomes.txt file.\n * @extends RaFile\n * @param {(string|string[])} [genomesFile=[]] - A genomes.txt file as a string\n * @throws {Error} Throws if the first line of the hub.txt file doesn't start\n * with \"genome <genome_name>\" or if it has invalid entries\n */\nexport default class GenomesFile extends RaFile {\n    validate(requiredFields = ['genome', 'trackDb']) {\n        // TODO: check if genome is hosted by UCSC and if not, require twoBitPath and groups\n        if (this.nameKey !== 'genome') {\n            throw new Error('Genomes file must begin with a line like \"genome <genome_name>\"');\n        }\n        for (const [genomeName, genome] of Object.entries(this.data)) {\n            validateRequiredFieldsArePresent(genome, requiredFields, `genome ${genomeName}`);\n        }\n    }\n}\n//# sourceMappingURL=genomesFile.js.map","import RaStanza from './raStanza';\nimport { validateRequiredFieldsArePresent } from './util';\n/**\n * Class representing a hub.txt file.\n * @extends RaStanza\n * @param {(string|string[])} [hubFile=[]] - A hub.txt file as a string\n * @throws {Error} Throws if the first line of the hub.txt file doesn't start\n * with \"hub <hub_name>\", if it has invalid entries, or is missing required\n * entries\n */\nexport default class HubFile extends RaStanza {\n    validate() {\n        validateRequiredFieldsArePresent(this, ['hub', 'shortLabel', 'longLabel', 'genomesFile', 'email'], 'Hub file');\n    }\n}\n//# sourceMappingURL=hubFile.js.map","import RaStanza from './raStanza';\nimport TrackDbFile from './trackDbFile';\nimport { validateRequiredFieldsArePresent } from './util';\n/**\n * Class representing a \"single-file\" hub.txt file that contains all the\n * sections of a hub in a single file.\n */\nexport default class SingleFileHub {\n    constructor(hubText) {\n        const [hubSection, genomeSection, ...trackSections] = hubText\n            .trimEnd()\n            .split(/(?:[\\t ]*\\r?\\n){2,}/);\n        this.hubData = new RaStanza(hubSection);\n        this.validateHub();\n        this.genome = new RaStanza(genomeSection);\n        this.validateGenomeSection();\n        this.tracks = new TrackDbFile(trackSections.join('\\n\\n'), {\n            skipValidation: false,\n        });\n    }\n    validateHub() {\n        if (this.hubData.nameKey !== 'hub') {\n            throw new Error('Hub file must begin with a line like \"hub <hub_name>\"');\n        }\n        validateRequiredFieldsArePresent(this.hubData, [\n            'hub',\n            'shortLabel',\n            'longLabel',\n            'email',\n            'descriptionUrl',\n        ]);\n    }\n    validateGenomeSection() {\n        if (this.genome.nameKey !== 'genome') {\n            throw new Error('Genomes file must begin with a line like \"genome <genome_name>\"');\n        }\n    }\n}\n//# sourceMappingURL=singleFileHub.js.map","import { GenomesFile, TrackDbFile } from '@gmod/ucsc-hub';\nimport { isUriLocation, notEmpty, objectHash } from '@jbrowse/core/util';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { generateUnknownTrackConf } from '@jbrowse/core/util/tracks';\nexport async function fetchGenomesFile(genomesLoc) {\n    const genomesFileText = await openLocation(genomesLoc).readFile('utf8');\n    return new GenomesFile(genomesFileText);\n}\nexport async function fetchTrackDbFile(trackDbLoc) {\n    const text = await openLocation(trackDbLoc).readFile('utf8');\n    return new TrackDbFile(text);\n}\nexport function makeLoc(first, base) {\n    return {\n        uri: new URL(first, new URL(base.uri, base.baseUri)).href,\n        locationType: 'UriLocation',\n    };\n}\nexport function makeLocAlt(first, alt, base) {\n    return first ? makeLoc(first, base) : makeLoc(alt, base);\n}\nexport function makeLoc2(first, alt) {\n    return first\n        ? {\n            uri: first,\n            locationType: 'LocalPath',\n        }\n        : {\n            uri: alt,\n            locationType: 'UriLocation',\n        };\n}\nexport function generateTracks({ trackDb, trackDbLoc, assemblyName, sequenceAdapter, }) {\n    return Object.entries(trackDb.data)\n        .map(([trackName, track]) => {\n        var _a;\n        const trackKeys = Object.keys(track);\n        const parentTrackKeys = new Set([\n            'superTrack',\n            'compositeTrack',\n            'container',\n            'view',\n        ]);\n        if (trackKeys.some(key => parentTrackKeys.has(key))) {\n            return undefined;\n        }\n        const parentTracks = [];\n        let currentTrackName = trackName;\n        do {\n            currentTrackName = ((_a = trackDb.data[currentTrackName]) === null || _a === void 0 ? void 0 : _a.data.parent) || '';\n            if (currentTrackName) {\n                currentTrackName = currentTrackName.split(' ')[0];\n                parentTracks.push(trackDb.data[currentTrackName]);\n            }\n        } while (currentTrackName);\n        parentTracks.reverse();\n        const categories = parentTracks\n            .map(p => p === null || p === void 0 ? void 0 : p.data.shortLabel)\n            .filter((f) => !!f);\n        const res = makeTrackConfig({\n            track: track,\n            categories,\n            trackDbLoc,\n            trackDb,\n            sequenceAdapter,\n        });\n        return {\n            ...res,\n            trackId: `ucsc-trackhub-${objectHash(res)}`,\n            assemblyNames: [assemblyName],\n        };\n    })\n        .filter(notEmpty);\n}\nfunction makeTrackConfig({ track, categories, trackDbLoc, trackDb, sequenceAdapter, }) {\n    var _a;\n    const trackType = track.data.type || ((_a = trackDb.data[track.data.parent || '']) === null || _a === void 0 ? void 0 : _a.data.type) || '';\n    const name = track.data.shortLabel || '';\n    const bigDataUrl = track.data.bigDataUrl || '';\n    const bigDataIdx = track.data.bigDataIndex || '';\n    const isUri = isUriLocation(trackDbLoc);\n    let baseTrackType = trackType.split(' ')[0] || '';\n    if (baseTrackType === 'bam' && bigDataUrl.toLowerCase().endsWith('cram')) {\n        baseTrackType = 'cram';\n    }\n    const bigDataLocation = isUri\n        ? makeLoc(bigDataUrl, trackDbLoc)\n        : makeLoc2(bigDataUrl);\n    switch (baseTrackType) {\n        case 'bam':\n            return {\n                type: 'AlignmentsTrack',\n                name: track.data.longLabel,\n                description: track.data.longLabel,\n                category: categories,\n                adapter: {\n                    type: 'BamAdapter',\n                    bamLocation: bigDataLocation,\n                    index: {\n                        location: isUri\n                            ? makeLocAlt(bigDataIdx, `${bigDataUrl}.bai`, trackDbLoc)\n                            : makeLoc2(bigDataIdx, `${bigDataUrl}.bai`),\n                    },\n                },\n            };\n        case 'cram':\n            return {\n                type: 'AlignmentsTrack',\n                name,\n                description: track.data.longLabel,\n                category: categories,\n                adapter: {\n                    type: 'CramAdapter',\n                    cramLocation: bigDataLocation,\n                    craiLocation: isUri\n                        ? makeLocAlt(bigDataIdx, `${bigDataUrl}.crai`, trackDbLoc)\n                        : makeLoc2(bigDataIdx, `${bigDataUrl}.crai`),\n                    sequenceAdapter,\n                },\n            };\n        case 'bigBarChart':\n        case 'bigBed':\n        case 'bigGenePred':\n        case 'bigChain':\n        case 'bigInteract':\n        case 'bigMaf':\n        case 'bigNarrowPeak':\n        case 'bigPsl':\n            return {\n                type: 'FeatureTrack',\n                name,\n                description: track.data.longLabel,\n                category: categories,\n                adapter: {\n                    type: 'BigBedAdapter',\n                    bigBedLocation: bigDataLocation,\n                },\n            };\n        case 'bigWig':\n            return {\n                type: 'QuantitativeTrack',\n                name,\n                description: track.data.longLabel,\n                category: categories,\n                adapter: {\n                    type: 'BigWigAdapter',\n                    bigWigLocation: bigDataLocation,\n                },\n            };\n        case 'vcfTabix':\n            return {\n                type: 'VariantTrack',\n                name,\n                description: track.data.longLabel,\n                category: categories,\n                adapter: {\n                    type: 'VcfTabixAdapter',\n                    vcfGzLocation: bigDataLocation,\n                    index: {\n                        location: isUri\n                            ? makeLocAlt(bigDataIdx, `${bigDataUrl}.tbi`, trackDbLoc)\n                            : makeLoc2(bigDataIdx, `${bigDataUrl}.tbi`),\n                    },\n                },\n            };\n        case 'hic':\n            return {\n                type: 'HicTrack',\n                name,\n                description: track.data.longLabel,\n                category: categories,\n                adapter: {\n                    type: 'HicAdapter',\n                    hicLocation: bigDataLocation,\n                },\n            };\n        default:\n            return generateUnknownTrackConf(name, baseTrackType, categories);\n    }\n}\nexport { default as ucscAssemblies } from './ucscAssemblies';\n","import { HubFile, SingleFileHub } from '@gmod/ucsc-hub';\nimport { getConf } from '@jbrowse/core/configuration';\nimport { getSession } from '@jbrowse/core/util';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { nanoid } from '@jbrowse/core/util/nanoid';\nimport { fetchGenomesFile, fetchTrackDbFile, generateTracks, } from './ucscTrackHub';\nfunction resolve(uri, baseUri) {\n    return new URL(uri, baseUri).href;\n}\nexport async function doConnect(self) {\n    var _a;\n    const session = getSession(self);\n    const notLoadedAssemblies = [];\n    try {\n        const hubFileLocation = getConf(self, 'hubTxtLocation');\n        const hubFileText = await openLocation(hubFileLocation).readFile('utf8');\n        const hubUri = resolve(hubFileLocation.uri, hubFileLocation.baseUri);\n        const { assemblyManager } = session;\n        if (hubFileText.includes('useOneFile on')) {\n            const hub = new SingleFileHub(hubFileText);\n            const { genome, tracks } = hub;\n            const genomeName = genome.name;\n            const asm = assemblyManager.get(genomeName);\n            if (!asm) {\n                session.addSessionAssembly({\n                    name: genomeName,\n                    sequence: {\n                        type: 'ReferenceSequenceTrack',\n                        trackId: `${genomeName}-${nanoid()}`,\n                        adapter: {\n                            type: 'TwoBitAdapter',\n                            twoBitLocation: {\n                                uri: resolve(genome.data.twoBitPath, hubUri),\n                            },\n                            chromSizesLocation: {\n                                uri: resolve(genome.data.chromSizes, hubUri),\n                            },\n                        },\n                    },\n                });\n            }\n            const asm2 = assemblyManager.get(genomeName);\n            const sequenceAdapter = getConf(asm2, ['sequence', 'adapter']);\n            const tracksNew = generateTracks({\n                trackDb: tracks,\n                trackDbLoc: hubFileLocation,\n                assemblyName: genomeName,\n                sequenceAdapter,\n            });\n            self.addTrackConfs(tracksNew);\n        }\n        else {\n            const hubFile = new HubFile(hubFileText);\n            const genomeFile = hubFile.data.genomesFile;\n            if (!genomeFile) {\n                throw new Error('genomesFile not found on hub');\n            }\n            const hubUri = resolve(hubFileLocation.uri, hubFileLocation.baseUri);\n            const genomesFileLocation = hubUri\n                ? {\n                    uri: resolve(genomeFile, hubUri),\n                    locationType: 'UriLocation',\n                }\n                : {\n                    localPath: genomeFile,\n                    locationType: 'LocalPathLocation',\n                };\n            const genomesFile = await fetchGenomesFile(genomesFileLocation);\n            const map = {};\n            for (const [genomeName, genome] of Object.entries(genomesFile.data)) {\n                const assemblyNames = getConf(self, 'assemblyNames');\n                if (assemblyNames.length > 0 && !assemblyNames.includes(genomeName)) {\n                    continue;\n                }\n                const asm = assemblyManager.get(genomeName);\n                if (!asm) {\n                    notLoadedAssemblies.push(genomeName);\n                    continue;\n                }\n                const db = genome.data.trackDb;\n                if (!db) {\n                    throw new Error('genomesFile not found on hub');\n                }\n                const base = new URL(genomeFile, hubUri);\n                const loc = hubUri\n                    ? {\n                        uri: new URL(db, base).href,\n                        locationType: 'UriLocation',\n                    }\n                    : {\n                        localPath: db,\n                        locationType: 'LocalPathLocation',\n                    };\n                const trackDb = await fetchTrackDbFile(loc);\n                const sequenceAdapter = getConf(asm, ['sequence', 'adapter']);\n                const tracks = generateTracks({\n                    trackDb,\n                    trackDbLoc: loc,\n                    assemblyName: genomeName,\n                    sequenceAdapter,\n                });\n                self.addTrackConfs(tracks);\n                map[genomeName] = tracks.length;\n            }\n            const loadedAssemblies = Object.entries(map);\n            const str1 = loadedAssemblies.length\n                ? `Loaded data from these assemblies: ${loadedAssemblies\n                    .map(([key, val]) => `${key} (${val} tracks)`)\n                    .join(', ')}`\n                : '';\n            const str2 = notLoadedAssemblies.length\n                ? `Skipped data from these assemblies: ${notLoadedAssemblies.join(', ')}`\n                : '';\n            session.notify([str1, str2].filter(f => !!f).join('. '), 'success');\n        }\n    }\n    catch (e) {\n        console.error(e);\n        session.notifyError(`${getConf(self, 'name')}: \"${e}\"`, e);\n        (_a = session.breakConnection) === null || _a === void 0 ? void 0 : _a.call(session, self.configuration);\n    }\n}\n"],"names":["RaStanza","stanza","options","checkIndent","skipValidation","stanzaLines","currentIndent","continuedLine","line","trimmedLine","combinedLine","indent","sep","key","value","RaFile","raFile","stanzas","raStanza","validateRequiredFieldsArePresent","map","requiredFields","description","missingFields","field","TrackDbFile","trackDbFile","_a","trackName","track","trackKeys","parentTrackKeys","currentTrackName","currentTrack","parentTracks","settings","parentTrack","ret","GenomesFile","genomeName","genome","HubFile","SingleFileHub","hubText","hubSection","genomeSection","trackSections","fetchGenomesFile","genomesLoc","genomesFileText","openLocation","fetchTrackDbFile","trackDbLoc","text","makeLoc","first","base","makeLocAlt","alt","makeLoc2","generateTracks","trackDb","assemblyName","sequenceAdapter","categories","p","f","res","makeTrackConfig","objectHash","notEmpty","trackType","name","bigDataUrl","bigDataIdx","isUri","isUriLocation","baseTrackType","bigDataLocation","generateUnknownTrackConf","resolve","uri","baseUri","doConnect","self","session","getSession","notLoadedAssemblies","hubFileLocation","getConf","hubFileText","hubUri","assemblyManager","hub","tracks","nanoid","asm2","tracksNew","genomeFile","genomesFileLocation","genomesFile","assemblyNames","asm","db","loc","loadedAssemblies","str1","val","str2","e"],"mappings":"yEAKe,MAAMA,CAAS,CAC1B,YAAYC,EAAS,CAAE,EAAEC,EAAS,CAC9B,KAAK,KAAO,CAAE,EACd,KAAM,CAAE,YAAAC,EAAc,GAAM,eAAAC,EAAiB,EAAK,EAAKF,GAAmD,CAAE,EAC5G,IAAIG,EACA,OAAOJ,GAAW,SAClBI,EAAcJ,EAAO,UAAU,MAAM,OAAO,EAEvCA,EACLI,EAAcJ,EAGdI,EAAc,CAAE,EAEpB,IAAIC,EACAC,EACJ,UAAWC,KAAQH,EAAa,CAC5B,GAAIG,IAAS,GACT,MAAM,IAAI,MAAM,uCAAuC,EAE3D,GAAIA,EAAK,KAAI,EAAG,WAAW,GAAG,EAC1B,SAEJ,GAAIA,EAAK,QAAO,EAAG,SAAS,IAAI,EAAG,CAC/B,MAAMC,EAAcD,EAAK,QAAS,EAAC,MAAM,EAAG,EAAE,EAC1CD,EACAA,GAAiBE,EAAY,UAAW,EAGxCF,EAAgBE,EAEpB,QAChB,CACY,IAAIC,EAAeF,EAKnB,GAJID,IACAG,EAAeH,EAAgBG,EAAa,UAAW,EACvDH,EAAgB,QAEhBD,GAAqEH,EAAa,CAClF,MAAMQ,EAASD,EAAa,MAAM,WAAW,EAC7C,GAAIJ,IAAkB,OACdK,EAEA,CAAG,CAAAL,CAAa,EAAIK,EAGpBL,EAAgB,WAGdA,IAAkB,IAAMK,IAAW,MACxCL,GAAiBK,GAAUL,IAAkBK,EAAO,CAAC,EACtD,MAAM,IAAI,MAAM,oCAAoC,CAExE,MAEgBL,EAAgB,GAEpB,MAAMG,EAAcC,EAAa,KAAM,EACjCE,EAAMH,EAAY,QAAQ,GAAG,EACnC,GAAIG,IAAQ,GAAI,CACZ,GAAI,CAAC,KAAK,QACN,MAAM,IAAI,MAAM,yDAAyD,EAG7E,GAAI,KAAK,KAAKH,CAAW,EACrB,SAEJ,KAAK,KAAKA,CAAW,EAAI,GACzB,QAChB,CACY,MAAMI,EAAMJ,EAAY,MAAM,EAAGG,CAAG,EAC9BE,EAAQL,EAAY,MAAMG,EAAM,CAAC,EACvC,GAAI,KAAK,KAAKC,CAAG,GAAKC,IAAU,KAAK,KAAKD,CAAG,EACzC,MAAM,IAAI,MAAM,wDACRA,CAAG,kBAAkB,KAAK,KAAKA,CAAG,CAAC,QAAQC,CAAK,EAAE,EAEzD,KAAK,UACN,KAAK,QAAUD,EACf,KAAK,KAAOJ,EAAY,MAAMG,EAAM,CAAC,GAEzC,KAAK,KAAKC,CAAG,EAAIC,CAC7B,CACaV,GACD,KAAK,SAAU,CAE3B,CACI,UAAW,CAAA,CACf,CCtEe,MAAMW,CAAO,CACxB,YAAYC,EAAS,CAAE,EAAEd,EAAS,CAC9B,KAAK,KAAO,CAAE,EACd,KAAM,CAAE,YAAAC,EAAc,GAAM,eAAAC,EAAiB,EAAK,EAAKF,GAAmD,CAAE,EAC5G,IAAIe,EACA,OAAOD,GAAW,SAClBC,EAAUD,EAAO,UAAU,MAAM,qBAAqB,EAEjDA,EACLC,EAAUD,EAGVC,EAAU,CAAE,EAEhB,UAAWhB,KAAUgB,EAAS,CAC1B,GAAIhB,IAAW,GACX,MAAM,IAAI,MAAM,2BAA2B,EAE/C,GAAIA,EAAO,KAAI,EAAG,WAAW,GAAG,GACRA,EACf,QAAO,EACP,MAAM,OAAO,EACb,IAAIO,GAAQA,EAAK,MAAM,EACZ,MAAMA,GAAQA,EAAK,WAAW,GAAG,CAAC,EAC9C,SAGR,MAAMU,EAAW,IAAIlB,EAASC,EAAQ,CAAE,YAAAE,CAAW,CAAE,EACrD,GAAI,CAAC,KAAK,QACN,KAAK,QAAUe,EAAS,gBAEnBA,EAAS,UAAY,KAAK,QAC/B,MAAM,IAAI,MAAM,kEACA,KAAK,OAAO,QAAQA,EAAS,OAAO,EAAE,EAE1D,GAAI,CAACA,EAAS,KACV,MAAM,IAAI,MAAM,mBAAmBA,EAAS,IAAI,EAAE,EAEtD,GAAI,KAAK,KAAKA,EAAS,IAAI,EACvB,MAAM,IAAI,MAAM,8BAA8BA,EAAS,IAAI,EAAE,EAEjE,KAAK,KAAKA,EAAS,IAAI,EAAIA,CACvC,CACad,GACD,KAAK,SAAU,CAE3B,CACI,UAAW,CAAA,CACf,CCrEO,SAASe,EAAiCC,EAAKC,EAAgBC,EAAc,GAAI,CACpF,MAAMC,EAAgB,CAAE,EACxB,UAAWC,KAASH,EACXD,EAAI,KAAKI,CAAK,GACfD,EAAc,KAAKC,CAAK,EAGhC,GAAID,EAAc,OAAS,EACvB,MAAM,IAAI,MAAM,GAAGD,CAAW,4BAA4BC,EAAc,SAAW,EAAI,IAAM,KAAK,KAAKA,EAAc,KAAK,IAAI,CAAC,EAAE,CAEzI,CCFe,MAAME,UAAoBV,CAAO,CAC5C,YAAYW,EAAaxB,EAAS,CAC9B,MAAMwB,EAAa,CAAE,GAAGxB,EAAS,YAAa,EAAK,CAAE,CAC7D,CACI,UAAW,CACP,IAAIyB,EACJ,GAAI,KAAK,UAAY,QACjB,MAAM,IAAI,MAAM,gBAAgB,KAAK,OAAO,sDAAsD,EAEtG,SAAW,CAACC,EAAWC,CAAK,IAAK,OAAO,QAAQ,KAAK,IAAI,EAAG,CACxD,MAAMC,EAAY,OAAO,KAAKD,EAAM,IAAI,EACxCV,EAAiCU,EAAO,CAAC,QAAS,YAAY,EAAG,SAASD,CAAS,EAAE,EACrF,MAAMG,EAAkB,IAAI,IAAI,CAC5B,aACA,iBACA,YACA,MAChB,CAAa,EACD,GAAI,CAACD,EAAU,KAAKjB,GAAOkB,EAAgB,IAAIlB,CAAG,CAAC,EAAG,CAClD,GAAI,CAACiB,EAAU,SAAS,YAAY,EAChC,MAAM,IAAI,MAAM,SAASF,CAAS,uCAAuC,EAE7E,GAAI,CAACE,EAAU,SAAS,MAAM,GAEtB,CADiB,OAAO,KAAK,KAAK,SAASF,CAAS,CAAC,EACvC,SAAS,MAAM,EAC7B,MAAM,IAAI,MAAM,iBAAiBA,CAAS,4DAA4D,CAG9H,CACY,IAAII,EAAmBJ,EACvB,GAEII,GAAoBL,EAAK,KAAK,KAAKK,CAAgB,KAAO,MAAQL,IAAO,OAAS,OAASA,EAAG,OAC1FK,IAEA,CAACA,CAAgB,EAAIA,EAAiB,MAAM,GAAG,SAE9CA,GACT,MAAMC,EAAe,KAAK,KAAKL,CAAS,EACpCK,IACA,KAAK,KAAKL,CAAS,EAAIK,EAEvC,CACA,CAOI,SAASL,EAAW,CAChB,IAAID,EACJ,GAAI,CAAC,KAAK,KAAKC,CAAS,EACpB,MAAM,IAAI,MAAM,SAASA,CAAS,iBAAiB,EAEvD,MAAMM,EAAe,CAACN,CAAS,EAC/B,IAAII,EAAmBJ,EACvB,GAEII,GAAoBL,EAAK,KAAK,KAAKK,CAAgB,KAAO,MAAQL,IAAO,OAAS,OAASA,EAAG,OAC1FK,GACAE,EAAa,KAAKF,CAAgB,QAEjCA,GACT,MAAMG,EAAW,CAAE,EACnBD,EAAa,QAAS,EACtB,UAAWE,KAAeF,EAAc,CACpC,MAAMG,EAAM,KAAK,KAAKD,CAAW,EACjC,GAAIC,EACA,SAAW,CAACxB,EAAKC,CAAK,IAAK,OAAO,QAAQuB,CAAG,EACzCF,EAAStB,CAAG,EAAIC,CAGpC,CACQ,OAAOqB,CACf,CACA,CC5Ee,MAAMG,UAAoBvB,CAAO,CAC5C,SAASM,EAAiB,CAAC,SAAU,SAAS,EAAG,CAE7C,GAAI,KAAK,UAAY,SACjB,MAAM,IAAI,MAAM,iEAAiE,EAErF,SAAW,CAACkB,EAAYC,CAAM,IAAK,OAAO,QAAQ,KAAK,IAAI,EACvDrB,EAAiCqB,EAAQnB,EAAgB,UAAUkB,CAAU,EAAE,CAE3F,CACA,CCTe,MAAME,UAAgBzC,CAAS,CAC1C,UAAW,CACPmB,EAAiC,KAAM,CAAC,MAAO,aAAc,YAAa,cAAe,OAAO,EAAG,UAAU,CACrH,CACA,CCPe,MAAMuB,CAAc,CAC/B,YAAYC,EAAS,CACjB,KAAM,CAACC,EAAYC,EAAe,GAAGC,CAAa,EAAIH,EACjD,QAAO,EACP,MAAM,qBAAqB,EAChC,KAAK,QAAU,IAAI3C,EAAS4C,CAAU,EACtC,KAAK,YAAa,EAClB,KAAK,OAAS,IAAI5C,EAAS6C,CAAa,EACxC,KAAK,sBAAuB,EAC5B,KAAK,OAAS,IAAIpB,EAAYqB,EAAc,KAAK;AAAA;AAAA,CAAM,EAAG,CACtD,eAAgB,EAC5B,CAAS,CACT,CACI,aAAc,CACV,GAAI,KAAK,QAAQ,UAAY,MACzB,MAAM,IAAI,MAAM,uDAAuD,EAE3E3B,EAAiC,KAAK,QAAS,CAC3C,MACA,aACA,YACA,QACA,gBACZ,CAAS,CACT,CACI,uBAAwB,CACpB,GAAI,KAAK,OAAO,UAAY,SACxB,MAAM,IAAI,MAAM,iEAAiE,CAE7F,CACA,WCjCO,eAAe4B,EAAiBC,EAAY,CAC/C,MAAMC,EAAkB,MAAMC,EAAY,aAACF,CAAU,EAAE,SAAS,MAAM,EACtE,OAAO,IAAIV,EAAYW,CAAe,CAC1C,CACO,eAAeE,EAAiBC,EAAY,CAC/C,MAAMC,EAAO,MAAMH,EAAY,aAACE,CAAU,EAAE,SAAS,MAAM,EAC3D,OAAO,IAAI3B,EAAY4B,CAAI,CAC/B,CACO,SAASC,EAAQC,EAAOC,EAAM,CACjC,MAAO,CACH,IAAK,IAAI,IAAID,EAAO,IAAI,IAAIC,EAAK,IAAKA,EAAK,OAAO,CAAC,EAAE,KACrD,aAAc,aACjB,CACL,CACO,SAASC,EAAWF,EAAOG,EAAKF,EAAM,CACzC,OAAeF,EAARC,GAAuCG,EAAhBF,CAAI,CACtC,CACO,SAASG,EAASJ,EAAOG,EAAK,CACjC,OAAOH,EACD,CACE,IAAKA,EACL,aAAc,WAC1B,EACU,CACE,IAAKG,EACL,aAAc,aACjB,CACT,CACO,SAASE,EAAe,CAAE,QAAAC,EAAS,WAAAT,EAAY,aAAAU,EAAc,gBAAAC,CAAe,EAAK,CACpF,OAAO,OAAO,QAAQF,EAAQ,IAAI,EAC7B,IAAI,CAAC,CAACjC,EAAWC,CAAK,IAAM,CAC7B,IAAIF,EACJ,MAAMG,EAAY,OAAO,KAAKD,CAAK,EAC7BE,EAAkB,IAAI,IAAI,CAC5B,aACA,iBACA,YACA,MACZ,CAAS,EACD,GAAID,EAAU,KAAKjB,GAAOkB,EAAgB,IAAIlB,CAAG,CAAC,EAC9C,OAEJ,MAAMqB,EAAe,CAAE,EACvB,IAAIF,EAAmBJ,EACvB,GACII,IAAqBL,EAAKkC,EAAQ,KAAK7B,CAAgB,KAAO,MAAQL,IAAO,OAAS,OAASA,EAAG,KAAK,SAAW,GAC9GK,IACAA,EAAmBA,EAAiB,MAAM,GAAG,EAAE,CAAC,EAChDE,EAAa,KAAK2B,EAAQ,KAAK7B,CAAgB,CAAC,SAE/CA,GACTE,EAAa,QAAS,EACtB,MAAM8B,EAAa9B,EACd,IAAI+B,GAAKA,GAAM,KAAuB,OAASA,EAAE,KAAK,UAAU,EAChE,OAAQC,GAAM,CAAC,CAACA,CAAC,EAChBC,EAAMC,EAAgB,CACxB,MAAOvC,EACP,WAAAmC,EACA,WAAAZ,EACA,QAAAS,EACA,gBAAAE,CACZ,CAAS,EACD,MAAO,CACH,GAAGI,EACH,QAAS,iBAAiBE,aAAWF,CAAG,CAAC,GACzC,cAAe,CAACL,CAAY,CAC/B,CACJ,CAAA,EACI,OAAOQ,EAAAA,QAAQ,CACxB,CACA,SAASF,EAAgB,CAAE,MAAAvC,EAAO,WAAAmC,EAAY,WAAAZ,EAAY,QAAAS,EAAS,gBAAAE,GAAoB,CACnF,IAAIpC,EACJ,MAAM4C,EAAY1C,EAAM,KAAK,QAAUF,EAAKkC,EAAQ,KAAKhC,EAAM,KAAK,QAAU,EAAE,KAAO,MAAQF,IAAO,OAAS,OAASA,EAAG,KAAK,OAAS,GACnI6C,EAAO3C,EAAM,KAAK,YAAc,GAChC4C,EAAa5C,EAAM,KAAK,YAAc,GACtC6C,EAAa7C,EAAM,KAAK,cAAgB,GACxC8C,EAAQC,EAAa,cAACxB,CAAU,EACtC,IAAIyB,EAAgBN,EAAU,MAAM,GAAG,EAAE,CAAC,GAAK,GAC3CM,IAAkB,OAASJ,EAAW,YAAW,EAAG,SAAS,MAAM,IACnEI,EAAgB,QAEpB,MAAMC,EAAkBH,EAClBrB,EAAQmB,EAAYrB,CAAU,EAC9BO,EAASc,CAAU,EACzB,OAAQI,EAAa,CACjB,IAAK,MACD,MAAO,CACH,KAAM,kBACN,KAAMhD,EAAM,KAAK,UACjB,YAAaA,EAAM,KAAK,UACxB,SAAUmC,EACV,QAAS,CACL,KAAM,aACN,YAAac,EACb,MAAO,CACH,SAAUH,EACJlB,EAAWiB,EAAY,GAAGD,CAAU,OAAQrB,CAAU,EACtDO,EAASe,EAAY,GAAGD,CAAU,MAAM,CACjD,CACJ,CACJ,EACL,IAAK,OACD,MAAO,CACH,KAAM,kBACN,KAAAD,EACA,YAAa3C,EAAM,KAAK,UACxB,SAAUmC,EACV,QAAS,CACL,KAAM,cACN,aAAcc,EACd,aAAcH,EACRlB,EAAWiB,EAAY,GAAGD,CAAU,QAASrB,CAAU,EACvDO,EAASe,EAAY,GAAGD,CAAU,OAAO,EAC/C,gBAAAV,CACH,CACJ,EACL,IAAK,cACL,IAAK,SACL,IAAK,cACL,IAAK,WACL,IAAK,cACL,IAAK,SACL,IAAK,gBACL,IAAK,SACD,MAAO,CACH,KAAM,eACN,KAAAS,EACA,YAAa3C,EAAM,KAAK,UACxB,SAAUmC,EACV,QAAS,CACL,KAAM,gBACN,eAAgBc,CACnB,CACJ,EACL,IAAK,SACD,MAAO,CACH,KAAM,oBACN,KAAAN,EACA,YAAa3C,EAAM,KAAK,UACxB,SAAUmC,EACV,QAAS,CACL,KAAM,gBACN,eAAgBc,CACnB,CACJ,EACL,IAAK,WACD,MAAO,CACH,KAAM,eACN,KAAAN,EACA,YAAa3C,EAAM,KAAK,UACxB,SAAUmC,EACV,QAAS,CACL,KAAM,kBACN,cAAec,EACf,MAAO,CACH,SAAUH,EACJlB,EAAWiB,EAAY,GAAGD,CAAU,OAAQrB,CAAU,EACtDO,EAASe,EAAY,GAAGD,CAAU,MAAM,CACjD,CACJ,CACJ,EACL,IAAK,MACD,MAAO,CACH,KAAM,WACN,KAAAD,EACA,YAAa3C,EAAM,KAAK,UACxB,SAAUmC,EACV,QAAS,CACL,KAAM,aACN,YAAac,CAChB,CACJ,EACL,QACI,OAAOC,2BAAyBP,EAAMK,EAAeb,CAAU,CAC3E,CACA,CC7KA,SAASgB,EAAQC,EAAKC,EAAS,CAC3B,OAAO,IAAI,IAAID,EAAKC,CAAO,EAAE,IACjC,CACO,eAAeC,EAAUC,EAAM,CAClC,IAAIzD,EACJ,MAAM0D,EAAUC,EAAU,WAACF,CAAI,EACzBG,EAAsB,CAAE,EAC9B,GAAI,CACA,MAAMC,EAAkBC,EAAAA,QAAQL,EAAM,gBAAgB,EAChDM,EAAc,MAAMxC,EAAY,aAACsC,CAAe,EAAE,SAAS,MAAM,EACjEG,EAASX,EAAQQ,EAAgB,IAAKA,EAAgB,OAAO,EAC7D,CAAE,gBAAAI,CAAe,EAAKP,EAC5B,GAAIK,EAAY,SAAS,eAAe,EAAG,CACvC,MAAMG,EAAM,IAAInD,EAAcgD,CAAW,EACnC,CAAE,OAAAlD,EAAQ,OAAAsD,CAAM,EAAKD,EACrBtD,EAAaC,EAAO,KACdoD,EAAgB,IAAIrD,CAAU,GAEtC8C,EAAQ,mBAAmB,CACvB,KAAM9C,EACN,SAAU,CACN,KAAM,yBACN,QAAS,GAAGA,CAAU,IAAIwD,EAAAA,OAAQ,CAAA,GAClC,QAAS,CACL,KAAM,gBACN,eAAgB,CACZ,IAAKf,EAAQxC,EAAO,KAAK,WAAYmD,CAAM,CAC9C,EACD,mBAAoB,CAChB,IAAKX,EAAQxC,EAAO,KAAK,WAAYmD,CAAM,CAC9C,CACJ,CACJ,CACrB,CAAiB,EAEL,MAAMK,EAAOJ,EAAgB,IAAIrD,CAAU,EACrCwB,EAAkB0B,EAAAA,QAAQO,EAAM,CAAC,WAAY,SAAS,CAAC,EACvDC,EAAYrC,EAAe,CAC7B,QAASkC,EACT,WAAYN,EACZ,aAAcjD,EACd,gBAAAwB,CAChB,CAAa,EACDqB,EAAK,cAAca,CAAS,CACxC,KACa,CAED,MAAMC,EADU,IAAIzD,EAAQiD,CAAW,EACZ,KAAK,YAChC,GAAI,CAACQ,EACD,MAAM,IAAI,MAAM,8BAA8B,EAElD,MAAMP,EAASX,EAAQQ,EAAgB,IAAKA,EAAgB,OAAO,EAC7DW,EAAsBR,EACtB,CACE,IAAKX,EAAQkB,EAAYP,CAAM,EAC/B,aAAc,aAClC,EACkB,CACE,UAAWO,EACX,aAAc,mBACjB,EACCE,EAAc,MAAMrD,EAAiBoD,CAAmB,EACxD/E,EAAM,CAAE,EACd,SAAW,CAACmB,EAAYC,CAAM,IAAK,OAAO,QAAQ4D,EAAY,IAAI,EAAG,CACjE,MAAMC,EAAgBZ,EAAAA,QAAQL,EAAM,eAAe,EACnD,GAAIiB,EAAc,OAAS,GAAK,CAACA,EAAc,SAAS9D,CAAU,EAC9D,SAEJ,MAAM+D,EAAMV,EAAgB,IAAIrD,CAAU,EAC1C,GAAI,CAAC+D,EAAK,CACNf,EAAoB,KAAKhD,CAAU,EACnC,QACpB,CACgB,MAAMgE,EAAK/D,EAAO,KAAK,QACvB,GAAI,CAAC+D,EACD,MAAM,IAAI,MAAM,8BAA8B,EAElD,MAAM/C,EAAO,IAAI,IAAI0C,EAAYP,CAAM,EACjCa,EAAMb,EACN,CACE,IAAK,IAAI,IAAIY,EAAI/C,CAAI,EAAE,KACvB,aAAc,aACtC,EACsB,CACE,UAAW+C,EACX,aAAc,mBACjB,EACC1C,EAAU,MAAMV,EAAiBqD,CAAG,EACpCzC,EAAkB0B,EAAAA,QAAQa,EAAK,CAAC,WAAY,SAAS,CAAC,EACtDR,EAASlC,EAAe,CAC1B,QAAAC,EACA,WAAY2C,EACZ,aAAcjE,EACd,gBAAAwB,CACpB,CAAiB,EACDqB,EAAK,cAAcU,CAAM,EACzB1E,EAAImB,CAAU,EAAIuD,EAAO,MACzC,CACY,MAAMW,EAAmB,OAAO,QAAQrF,CAAG,EACrCsF,EAAOD,EAAiB,OACxB,sCAAsCA,EACnC,IAAI,CAAC,CAAC5F,EAAK8F,CAAG,IAAM,GAAG9F,CAAG,KAAK8F,CAAG,UAAU,EAC5C,KAAK,IAAI,CAAC,GACb,GACAC,EAAOrB,EAAoB,OAC3B,uCAAuCA,EAAoB,KAAK,IAAI,CAAC,GACrE,GACNF,EAAQ,OAAO,CAACqB,EAAME,CAAI,EAAE,OAAO1C,GAAK,CAAC,CAACA,CAAC,EAAE,KAAK,IAAI,EAAG,SAAS,CAC9E,CACA,OACW2C,EAAG,CACN,QAAQ,MAAMA,CAAC,EACfxB,EAAQ,YAAY,GAAGI,EAAAA,QAAQL,EAAM,MAAM,CAAC,MAAMyB,CAAC,IAAKA,CAAC,GACxDlF,EAAK0D,EAAQ,mBAAqB,MAAQ1D,IAAO,QAAkBA,EAAG,KAAK0D,EAASD,EAAK,aAAa,CAC/G,CACA","x_google_ignoreList":[0,1,2,3,4,5,6,7,8]}