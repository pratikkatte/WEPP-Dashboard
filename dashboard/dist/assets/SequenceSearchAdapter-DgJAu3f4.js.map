{"version":3,"file":"SequenceSearchAdapter-DgJAu3f4.js","sources":["../../node_modules/@jbrowse/plugin-sequence/esm/SequenceSearchAdapter/SequenceSearchAdapter.js"],"sourcesContent":["import { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { SimpleFeature, doesIntersect2, revcom } from '@jbrowse/core/util';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { firstValueFrom } from 'rxjs';\nimport { toArray } from 'rxjs/operators';\nexport default class SequenceSearchAdapter extends BaseFeatureDataAdapter {\n    async configure() {\n        var _a;\n        const adapter = await ((_a = this.getSubAdapter) === null || _a === void 0 ? void 0 : _a.call(this, this.getConf('sequenceAdapter')));\n        if (!adapter) {\n            throw new Error('Error getting subadapter');\n        }\n        return adapter.dataAdapter;\n    }\n    async getRefNames() {\n        const adapter = await this.configure();\n        return adapter.getRefNames();\n    }\n    getFeatures(query, opts) {\n        return ObservableCreate(async (observer) => {\n            var _a;\n            const sequenceAdapter = await this.configure();\n            const hw = 10000;\n            const queryEnd = query.end + hw;\n            const queryStart = Math.max(0, query.start - hw);\n            if (queryEnd < 0 || queryStart > queryEnd) {\n                observer.complete();\n                return;\n            }\n            const ret = sequenceAdapter.getFeatures({\n                ...query,\n                start: queryStart,\n                end: queryEnd,\n            }, opts);\n            const feats = await firstValueFrom(ret.pipe(toArray()));\n            const residues = ((_a = feats[0]) === null || _a === void 0 ? void 0 : _a.get('seq')) || '';\n            const search = this.getConf('search');\n            const searchForward = this.getConf('searchForward');\n            const searchReverse = this.getConf('searchReverse');\n            const caseInsensitive = this.getConf('caseInsensitive');\n            const re = new RegExp(search, `g${caseInsensitive ? 'i' : ''}`);\n            if (search) {\n                if (searchForward) {\n                    const matches = residues.matchAll(re);\n                    for (const match of matches) {\n                        const s = queryStart + match.index;\n                        const e = queryStart + match.index + match[0].length;\n                        if (doesIntersect2(s, e, query.start, query.end)) {\n                            observer.next(new SimpleFeature({\n                                uniqueId: `${this.id}-${s}-${match[0]}-pos`,\n                                refName: query.refName,\n                                start: s,\n                                end: e,\n                                name: match[0],\n                                strand: 1,\n                            }));\n                        }\n                    }\n                }\n                if (searchReverse) {\n                    const matches = revcom(residues).matchAll(re);\n                    for (const match of matches) {\n                        const e = queryEnd - match.index;\n                        const s = queryEnd - match.index - match[0].length;\n                        if (doesIntersect2(s, e, query.start, query.end)) {\n                            observer.next(new SimpleFeature({\n                                uniqueId: `${this.id}-${s}-${match[0]}-neg`,\n                                refName: query.refName,\n                                start: s,\n                                end: e,\n                                name: match[0],\n                                strand: -1,\n                            }));\n                        }\n                    }\n                }\n            }\n            observer.complete();\n        });\n    }\n    freeResources() { }\n}\n"],"names":["SequenceSearchAdapter","BaseFeatureDataAdapter","_a","adapter","query","opts","ObservableCreate","observer","sequenceAdapter","hw","queryEnd","queryStart","ret","residues","firstValueFrom","toArray","search","searchForward","searchReverse","caseInsensitive","re","matches","match","s","e","doesIntersect2","SimpleFeature","revcom"],"mappings":"uIAKe,MAAMA,UAA8BC,EAAAA,sBAAuB,CACtE,MAAM,WAAY,CACd,IAAIC,EACJ,MAAMC,EAAU,OAAQD,EAAK,KAAK,iBAAmB,MAAQA,IAAO,OAAS,OAASA,EAAG,KAAK,KAAM,KAAK,QAAQ,iBAAiB,CAAC,GACnI,GAAI,CAACC,EACD,MAAM,IAAI,MAAM,0BAA0B,EAE9C,OAAOA,EAAQ,WACvB,CACI,MAAM,aAAc,CAEhB,OADgB,MAAM,KAAK,UAAW,GACvB,YAAa,CACpC,CACI,YAAYC,EAAOC,EAAM,CACrB,OAAOC,EAAAA,iBAAiB,MAAOC,GAAa,CACxC,IAAIL,EACJ,MAAMM,EAAkB,MAAM,KAAK,UAAW,EACxCC,EAAK,IACLC,EAAWN,EAAM,IAAMK,EACvBE,EAAa,KAAK,IAAI,EAAGP,EAAM,MAAQK,CAAE,EAC/C,GAAIC,EAAW,GAAKC,EAAaD,EAAU,CACvCH,EAAS,SAAU,EACnB,MAChB,CACY,MAAMK,EAAMJ,EAAgB,YAAY,CACpC,GAAGJ,EACH,MAAOO,EACP,IAAKD,CACR,EAAEL,CAAI,EAEDQ,IAAaX,GADL,MAAMY,EAAeF,EAAI,KAAKG,EAAO,CAAE,CAAC,GACxB,CAAC,KAAO,MAAQb,IAAO,OAAS,OAASA,EAAG,IAAI,KAAK,IAAM,GACnFc,EAAS,KAAK,QAAQ,QAAQ,EAC9BC,EAAgB,KAAK,QAAQ,eAAe,EAC5CC,EAAgB,KAAK,QAAQ,eAAe,EAC5CC,EAAkB,KAAK,QAAQ,iBAAiB,EAChDC,EAAK,IAAI,OAAOJ,EAAQ,IAAIG,EAAkB,IAAM,EAAE,EAAE,EAC9D,GAAIH,EAAQ,CACR,GAAIC,EAAe,CACf,MAAMI,EAAUR,EAAS,SAASO,CAAE,EACpC,UAAWE,KAASD,EAAS,CACzB,MAAME,EAAIZ,EAAaW,EAAM,MACvBE,EAAIb,EAAaW,EAAM,MAAQA,EAAM,CAAC,EAAE,OAC1CG,EAAAA,eAAeF,EAAGC,EAAGpB,EAAM,MAAOA,EAAM,GAAG,GAC3CG,EAAS,KAAK,IAAImB,gBAAc,CAC5B,SAAU,GAAG,KAAK,EAAE,IAAIH,CAAC,IAAID,EAAM,CAAC,CAAC,OACrC,QAASlB,EAAM,QACf,MAAOmB,EACP,IAAKC,EACL,KAAMF,EAAM,CAAC,EACb,OAAQ,CACxC,CAA6B,CAAC,CAE9B,CACA,CACgB,GAAIJ,EAAe,CACf,MAAMG,EAAUM,EAAM,OAACd,CAAQ,EAAE,SAASO,CAAE,EAC5C,UAAWE,KAASD,EAAS,CACzB,MAAMG,EAAId,EAAWY,EAAM,MACrB,EAAIZ,EAAWY,EAAM,MAAQA,EAAM,CAAC,EAAE,OACxCG,EAAAA,eAAe,EAAGD,EAAGpB,EAAM,MAAOA,EAAM,GAAG,GAC3CG,EAAS,KAAK,IAAImB,gBAAc,CAC5B,SAAU,GAAG,KAAK,EAAE,IAAI,CAAC,IAAIJ,EAAM,CAAC,CAAC,OACrC,QAASlB,EAAM,QACf,MAAO,EACP,IAAKoB,EACL,KAAMF,EAAM,CAAC,EACb,OAAQ,EACxC,CAA6B,CAAC,CAE9B,CACA,CACA,CACYf,EAAS,SAAU,CAC/B,CAAS,CACT,CACI,eAAgB,CAAA,CACpB","x_google_ignoreList":[0]}