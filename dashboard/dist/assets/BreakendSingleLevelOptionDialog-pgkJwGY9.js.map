{"version":3,"file":"BreakendSingleLevelOptionDialog-pgkJwGY9.js","sources":["../../node_modules/@jbrowse/sv-core/esm/Checkbox2.js","../../node_modules/@jbrowse/sv-core/esm/util.js","../../node_modules/@jbrowse/sv-core/esm/BreakendMultiLevelOptionDialog.js","../../node_modules/@jbrowse/sv-core/esm/BreakendSingleLevelOptionDialog.js"],"sourcesContent":["import React from 'react';\nimport { Checkbox, FormControlLabel } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()({\n    block: {\n        display: 'block',\n    },\n});\nexport default function Checkbox2({ checked, disabled, label, onChange, }) {\n    const { classes } = useStyles();\n    return (React.createElement(FormControlLabel, { disabled: disabled, className: classes.block, control: React.createElement(Checkbox, { checked: checked, onChange: onChange }), label: label }));\n}\n","import { parseBreakend } from '@gmod/vcf';\nimport { gatherOverlaps, getSession, when } from '@jbrowse/core/util';\nimport { transaction } from 'mobx';\nimport { getSnapshot } from 'mobx-state-tree';\nfunction stripIds(arr) {\n    return arr.map(({ id, displays, ...rest }) => ({\n        ...rest,\n        displays: displays.map(({ id, ...rest }) => rest),\n    }));\n}\nexport function getBreakendCoveringRegions({ feature, assembly, }) {\n    var _a;\n    const alt = (_a = feature.get('ALT')) === null || _a === void 0 ? void 0 : _a[0];\n    const bnd = alt ? parseBreakend(alt) : undefined;\n    const startPos = feature.get('start');\n    const refName = feature.get('refName');\n    const f = (ref) => assembly.getCanonicalRefName(ref) || ref;\n    if (alt === '<TRA>') {\n        const INFO = feature.get('INFO');\n        return {\n            pos: startPos,\n            refName: f(refName),\n            mateRefName: f(INFO.CHR2[0]),\n            matePos: INFO.END[0] - 1,\n        };\n    }\n    else if (bnd === null || bnd === void 0 ? void 0 : bnd.MatePosition) {\n        const matePosition = bnd.MatePosition.split(':');\n        return {\n            pos: startPos,\n            refName: f(refName),\n            mateRefName: f(matePosition[0]),\n            matePos: +matePosition[1] - 1,\n        };\n    }\n    else if (feature.get('mate')) {\n        const mate = feature.get('mate');\n        return {\n            pos: startPos,\n            refName: f(refName),\n            mateRefName: f(mate.refName),\n            matePos: mate.start,\n        };\n    }\n    else {\n        return {\n            pos: startPos,\n            refName: f(refName),\n            mateRefName: f(refName),\n            matePos: feature.get('end'),\n        };\n    }\n}\nexport function singleLevelSnapshotFromBreakendFeature({ feature, session, assemblyName, }) {\n    const { assemblyManager } = session;\n    const assembly = assemblyManager.get(assemblyName);\n    if (!assembly) {\n        throw new Error(`assembly ${assemblyName} not found`);\n    }\n    if (!assembly.regions) {\n        throw new Error(`assembly ${assemblyName} regions not loaded`);\n    }\n    const coverage = getBreakendCoveringRegions({\n        feature,\n        assembly,\n    });\n    const { refName, mateRefName } = coverage;\n    const topRegion = assembly.regions.find(f => f.refName === refName);\n    const bottomRegion = assembly.regions.find(f => f.refName === mateRefName);\n    return {\n        coverage,\n        snap: {\n            type: 'BreakpointSplitView',\n            views: [\n                {\n                    type: 'LinearGenomeView',\n                    displayedRegions: gatherOverlaps([\n                        { ...topRegion, assemblyName },\n                        { ...bottomRegion, assemblyName },\n                    ]),\n                },\n            ],\n            displayName: `${feature.get('name') || feature.get('id') || 'breakend'} split detail`,\n        },\n    };\n}\nexport async function navToSingleLevelBreak({ stableViewId, feature, assemblyName, session, tracks, windowSize = 0, }) {\n    var _a;\n    const { snap, coverage } = singleLevelSnapshotFromBreakendFeature({\n        feature,\n        assemblyName,\n        session,\n    });\n    const { refName, pos: startPos, mateRefName, matePos: endPos } = coverage;\n    let viewInStack = session.views.find(f => f.id === stableViewId);\n    if (!viewInStack) {\n        viewInStack = session.addView('BreakpointSplitView', {\n            ...snap,\n            views: [\n                {\n                    ...snap.views[0],\n                    tracks: tracks ? stripIds(getSnapshot(tracks)) : [],\n                },\n            ],\n        });\n    }\n    else {\n        (_a = viewInStack.views[0]) === null || _a === void 0 ? void 0 : _a.setDisplayedRegions(snap.views[0].displayedRegions);\n        viewInStack.setDisplayName(snap.displayName);\n    }\n    const lgv = viewInStack.views[0];\n    await when(() => lgv.initialized);\n    const l0 = lgv.bpToPx({\n        coord: Math.max(0, startPos - windowSize),\n        refName,\n    });\n    const r0 = lgv.bpToPx({\n        coord: endPos + windowSize,\n        refName: mateRefName,\n    });\n    if (l0 && r0) {\n        lgv.moveTo({ ...l0, offset: l0.offsetPx }, { ...r0, offset: r0.offsetPx });\n    }\n    else {\n        getSession(lgv).notify('Unable to navigate to breakpoint');\n    }\n}\nexport async function navToMultiLevelBreak({ stableViewId, feature, assemblyName, session, tracks, }) {\n    const bpPerPx = 10;\n    const { assemblyManager } = session;\n    const assembly = assemblyManager.get(assemblyName);\n    if (!assembly) {\n        throw new Error(`assembly ${assemblyName} not found`);\n    }\n    if (!assembly.regions) {\n        throw new Error(`assembly ${assemblyName} regions not loaded`);\n    }\n    const { refName, pos: startPos, mateRefName, matePos: endPos, } = getBreakendCoveringRegions({\n        feature,\n        assembly,\n    });\n    const topRegion = assembly.regions.find(f => f.refName === refName);\n    const bottomRegion = assembly.regions.find(f => f.refName === mateRefName);\n    const topMarkedRegion = [{ ...topRegion }, { ...topRegion }];\n    const bottomMarkedRegion = [{ ...bottomRegion }, { ...bottomRegion }];\n    topMarkedRegion[0].end = startPos;\n    topMarkedRegion[1].start = startPos;\n    bottomMarkedRegion[0].end = endPos;\n    bottomMarkedRegion[1].start = endPos;\n    const snap = {\n        type: 'BreakpointSplitView',\n        views: [\n            {\n                type: 'LinearGenomeView',\n                displayedRegions: topMarkedRegion,\n                hideHeader: true,\n                bpPerPx,\n                offsetPx: (topRegion.start + feature.get('start')) / bpPerPx,\n            },\n            {\n                type: 'LinearGenomeView',\n                displayedRegions: bottomMarkedRegion,\n                hideHeader: true,\n                bpPerPx,\n                tracks,\n                offsetPx: (bottomRegion.start + endPos) / bpPerPx,\n            },\n        ],\n        displayName: `${feature.get('name') || feature.get('id') || 'breakend'} split detail`,\n    };\n    let viewInStack = session.views.find(f => f.id === stableViewId);\n    if (!viewInStack) {\n        viewInStack = session.addView('BreakpointSplitView', {\n            ...snap,\n            id: stableViewId,\n            views: [\n                {\n                    ...snap.views[0],\n                    tracks: tracks ? stripIds(getSnapshot(tracks)) : [],\n                },\n                {\n                    ...snap.views[1],\n                    tracks: (tracks ? stripIds(getSnapshot(tracks)) : []).reverse(),\n                },\n            ],\n        });\n    }\n    else {\n        transaction(() => {\n            for (let i = 0; i < viewInStack.views.length; i++) {\n                const s = snap.views[i];\n                if (s) {\n                    viewInStack.views[i].setDisplayedRegions(s.displayedRegions);\n                    viewInStack.views[i].scrollTo(s.offsetPx - 800);\n                    viewInStack.views[i].zoomTo(s.bpPerPx);\n                }\n            }\n            viewInStack.setDisplayName(snap.displayName);\n        });\n    }\n}\n","import React, { useState } from 'react';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { Button, DialogActions, DialogContent } from '@mui/material';\nimport { when } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { getSnapshot } from 'mobx-state-tree';\nimport Checkbox2 from './Checkbox2';\nimport { getBreakendCoveringRegions } from './util';\nfunction stripIds(arr) {\n    return arr.map(({ id, displays, ...rest }) => ({\n        ...rest,\n        displays: displays.map(({ id, ...rest }) => rest),\n    }));\n}\nconst BreakendMultiLevelOptionDialog = observer(function ({ session, handleClose, feature, assemblyName, stableViewId, view, }) {\n    const [copyTracks, setCopyTracks] = useState(true);\n    const [mirror, setMirror] = useState(true);\n    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: \"Multi-level breakpoint split view options\" },\n        React.createElement(DialogContent, null,\n            React.createElement(\"div\", null, \"Launch multi-level breakpoint split view\"),\n            view ? (React.createElement(React.Fragment, null,\n                React.createElement(Checkbox2, { checked: copyTracks, label: \"Copy tracks into the new view\", onChange: event => {\n                        setCopyTracks(event.target.checked);\n                    } }),\n                copyTracks ? (React.createElement(Checkbox2, { checked: mirror, disabled: !copyTracks, label: \"Mirror the copied tracks (only available if copying tracks and using two level)\", onChange: event => {\n                        setMirror(event.target.checked);\n                    } })) : null)) : null),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { onClick: () => {\n                    ;\n                    (async () => {\n                        try {\n                            const { assemblyManager } = session;\n                            const assembly = await assemblyManager.waitForAssembly(assemblyName);\n                            if (!assembly) {\n                                throw new Error(`assembly ${assemblyName} not found`);\n                            }\n                            const { refName, pos, mateRefName, matePos } = getBreakendCoveringRegions({\n                                feature,\n                                assembly: assembly,\n                            });\n                            const viewTracks = view\n                                ? getSnapshot(view.tracks)\n                                : [];\n                            let viewInStack = session.views.find(f => f.id === stableViewId);\n                            const displayName = `${feature.get('name') || feature.get('id') || 'breakend'} split detail`;\n                            if (!viewInStack) {\n                                viewInStack = session.addView('BreakpointSplitView', {\n                                    id: stableViewId,\n                                    type: 'BreakpointSplitView',\n                                    displayName,\n                                    views: [\n                                        {\n                                            type: 'LinearGenomeView',\n                                            hideHeader: true,\n                                            tracks: stripIds(viewTracks),\n                                        },\n                                        {\n                                            type: 'LinearGenomeView',\n                                            hideHeader: true,\n                                            tracks: stripIds(mirror ? [...viewTracks].reverse() : viewTracks),\n                                        },\n                                    ],\n                                });\n                            }\n                            viewInStack.setDisplayName(displayName);\n                            const r1 = assembly.regions.find(r => r.refName === refName);\n                            const r2 = assembly.regions.find(r => r.refName === mateRefName);\n                            if (!r1 || !r2) {\n                                throw new Error(\"can't find regions\");\n                            }\n                            await Promise.all([\n                                viewInStack.views[0].navToLocations([\n                                    {\n                                        refName,\n                                        start: r1.start,\n                                        end: pos,\n                                        assemblyName,\n                                    },\n                                    {\n                                        refName,\n                                        start: pos + 1,\n                                        end: r1.end,\n                                        assemblyName,\n                                    },\n                                ]),\n                                viewInStack.views[1].navToLocations([\n                                    {\n                                        refName: mateRefName,\n                                        start: r2.start,\n                                        end: matePos,\n                                        assemblyName,\n                                    },\n                                    {\n                                        refName: mateRefName,\n                                        start: matePos + 1,\n                                        end: r2.end,\n                                        assemblyName,\n                                    },\n                                ]),\n                            ]);\n                            await when(() => viewInStack.views[1].initialized &&\n                                viewInStack.views[0].initialized);\n                            viewInStack.views[1].zoomTo(10);\n                            viewInStack.views[0].zoomTo(10);\n                            viewInStack.views[1].centerAt(matePos, mateRefName);\n                            viewInStack.views[0].centerAt(pos, refName);\n                        }\n                        catch (e) {\n                            console.error(e);\n                            session.notifyError(`${e}`, e);\n                        }\n                    })();\n                    handleClose();\n                }, variant: \"contained\", color: \"primary\", autoFocus: true }, \"OK\"),\n            React.createElement(Button, { color: \"secondary\", variant: \"contained\", onClick: () => {\n                    handleClose();\n                } }, \"Cancel\"))));\n});\nexport default BreakendMultiLevelOptionDialog;\n","import React, { useState } from 'react';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { useLocalStorage } from '@jbrowse/core/util';\nimport { Button, DialogActions, DialogContent, TextField } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport Checkbox2 from './Checkbox2';\nimport { navToSingleLevelBreak } from './util';\nconst BreakendSingleLevelOptionDialog = observer(function ({ session, handleClose, feature, stableViewId, assemblyName, view, }) {\n    const [copyTracks, setCopyTracks] = useState(true);\n    const [windowSize, setWindowSize] = useLocalStorage('breakpointWindowSize', '5000');\n    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: \"Single-level breakpoint split view options\" },\n        React.createElement(DialogContent, null,\n            view ? (React.createElement(Checkbox2, { checked: copyTracks, label: \"Copy tracks into the new view\", onChange: event => {\n                    setCopyTracks(event.target.checked);\n                } })) : null,\n            React.createElement(TextField, { label: \"Window size (bp)\", value: windowSize, onChange: event => {\n                    setWindowSize(event.target.value);\n                } })),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { onClick: () => {\n                    ;\n                    (async () => {\n                        try {\n                            const { assemblyManager } = session;\n                            const assembly = await assemblyManager.waitForAssembly(assemblyName);\n                            if (!assembly) {\n                                throw new Error(`assembly ${assemblyName} not found`);\n                            }\n                            await navToSingleLevelBreak({\n                                feature,\n                                assemblyName,\n                                session,\n                                stableViewId,\n                                tracks: view === null || view === void 0 ? void 0 : view.tracks,\n                                windowSize: +windowSize || 0,\n                            });\n                        }\n                        catch (e) {\n                            console.error(e);\n                            session.notifyError(`${e}`, e);\n                        }\n                    })();\n                    handleClose();\n                }, variant: \"contained\", color: \"primary\", autoFocus: true }, \"OK\"),\n            React.createElement(Button, { color: \"secondary\", variant: \"contained\", onClick: () => {\n                    handleClose();\n                } }, \"Cancel\"))));\n});\nexport default BreakendSingleLevelOptionDialog;\n"],"names":["useStyles","makeStyles","Checkbox2","checked","disabled","label","onChange","classes","React","FormControlLabel","Checkbox","stripIds","arr","id","displays","rest","getBreakendCoveringRegions","feature","assembly","_a","alt","bnd","parseBreakend","startPos","refName","f","ref","INFO","matePosition","mate","singleLevelSnapshotFromBreakendFeature","session","assemblyName","assemblyManager","coverage","mateRefName","topRegion","bottomRegion","gatherOverlaps","navToSingleLevelBreak","stableViewId","tracks","windowSize","snap","endPos","viewInStack","getSnapshot","lgv","when","l0","r0","getSession","BreakendMultiLevelOptionDialog","observer","handleClose","view","copyTracks","setCopyTracks","useState","mirror","setMirror","Dialog","DialogContent","event","DialogActions","Button","pos","matePos","viewTracks","displayName","r1","r","r2","e","BreakendSingleLevelOptionDialog","setWindowSize","useLocalStorage","TextField"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}